{"ast":null,"code":"\"use strict\";\n\nvar BaseRollingFileStream = require('./BaseRollingFileStream'),\n  debug = require('../debug')('RollingFileStream'),\n  util = require('util'),\n  path = require('path'),\n  child_process = require('child_process'),\n  zlib = require(\"zlib\"),\n  fs = require('fs');\nmodule.exports = RollingFileStream;\nfunction RollingFileStream(filename, size, backups, options) {\n  this.size = size;\n  this.backups = backups || 1;\n  function throwErrorIfArgumentsAreNotValid() {\n    if (!filename || !size || size <= 0) {\n      throw new Error(\"You must specify a filename and file size\");\n    }\n  }\n  throwErrorIfArgumentsAreNotValid();\n  RollingFileStream.super_.call(this, filename, options);\n}\nutil.inherits(RollingFileStream, BaseRollingFileStream);\nRollingFileStream.prototype.shouldRoll = function () {\n  debug(\"should roll with current size \" + this.currentSize + \" and max size \" + this.size);\n  return this.currentSize >= this.size;\n};\nRollingFileStream.prototype.roll = function (filename, callback) {\n  var that = this,\n    nameMatcher = new RegExp('^' + path.basename(filename));\n  function justTheseFiles(item) {\n    return nameMatcher.test(item);\n  }\n  function index(filename_) {\n    debug('Calculating index of ' + filename_);\n    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;\n  }\n  function byIndex(a, b) {\n    if (index(a) > index(b)) {\n      return 1;\n    } else if (index(a) < index(b)) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n  function compress(filename, cb) {\n    var gzip = zlib.createGzip();\n    var inp = fs.createReadStream(filename);\n    var out = fs.createWriteStream(filename + \".gz\");\n    inp.pipe(gzip).pipe(out);\n    fs.unlink(filename, cb);\n  }\n  function increaseFileIndex(fileToRename, cb) {\n    var idx = index(fileToRename);\n    debug('Index of ' + fileToRename + ' is ' + idx);\n    if (idx < that.backups) {\n      var ext = path.extname(fileToRename);\n      var destination = filename + '.' + (idx + 1);\n      if (that.options.compress && /^gz$/.test(ext.substring(1))) {\n        destination += ext;\n      }\n      //on windows, you can get a EEXIST error if you rename a file to an existing file\n      //so, we'll try to delete the file we're renaming to first\n      fs.unlink(destination, function (err) {\n        //ignore err: if we could not delete, it's most likely that it doesn't exist\n        debug('Renaming ' + fileToRename + ' -> ' + destination);\n        fs.rename(path.join(path.dirname(filename), fileToRename), destination, function (err) {\n          if (err) {\n            cb(err);\n          } else {\n            if (that.options.compress && ext != \".gz\") {\n              compress(destination, cb);\n            } else {\n              cb();\n            }\n          }\n        });\n      });\n    } else {\n      cb();\n    }\n  }\n  function renameTheFiles(cb) {\n    //roll the backups (rename file.n to file.n+1, where n <= numBackups)\n    debug(\"Renaming the old files\");\n    fs.readdir(path.dirname(filename), function (err, files) {\n      var filesToProcess = files.filter(justTheseFiles).sort(byIndex);\n      (function processOne(err) {\n        var file = filesToProcess.pop();\n        if (!file || err) {\n          return cb(err);\n        }\n        increaseFileIndex(file, processOne);\n      })();\n    });\n  }\n  debug(\"Rolling, rolling, rolling\");\n  this.closeTheStream(renameTheFiles.bind(null, this.openTheStream.bind(this, callback)));\n};","map":{"version":3,"names":["BaseRollingFileStream","require","debug","util","path","child_process","zlib","fs","module","exports","RollingFileStream","filename","size","backups","options","throwErrorIfArgumentsAreNotValid","Error","super_","call","inherits","prototype","shouldRoll","currentSize","roll","callback","that","nameMatcher","RegExp","basename","justTheseFiles","item","test","index","filename_","parseInt","substring","length","byIndex","a","b","compress","cb","gzip","createGzip","inp","createReadStream","out","createWriteStream","pipe","unlink","increaseFileIndex","fileToRename","idx","ext","extname","destination","err","rename","join","dirname","renameTheFiles","readdir","files","filesToProcess","filter","sort","processOne","file","pop","closeTheStream","bind","openTheStream"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/streams/RollingFileStream.js"],"sourcesContent":["\"use strict\";\nvar BaseRollingFileStream = require('./BaseRollingFileStream')\n, debug = require('../debug')('RollingFileStream')\n, util = require('util')\n, path = require('path')\n, child_process = require('child_process')\n, zlib = require(\"zlib\")\n, fs = require('fs');\n\nmodule.exports = RollingFileStream;\n\nfunction RollingFileStream (filename, size, backups, options) {\n  this.size = size;\n  this.backups = backups || 1;\n  \n  function throwErrorIfArgumentsAreNotValid() {\n    if (!filename || !size || size <= 0) {\n      throw new Error(\"You must specify a filename and file size\");\n    }\n  }\n  \n  throwErrorIfArgumentsAreNotValid();\n  \n  RollingFileStream.super_.call(this, filename, options);\n}\nutil.inherits(RollingFileStream, BaseRollingFileStream);\n\nRollingFileStream.prototype.shouldRoll = function() {\n  debug(\"should roll with current size \" + this.currentSize + \" and max size \" + this.size);\n  return this.currentSize >= this.size;\n};\n\nRollingFileStream.prototype.roll = function(filename, callback) {\n  var that = this,\n  nameMatcher = new RegExp('^' + path.basename(filename));\n  \n  function justTheseFiles (item) {\n    return nameMatcher.test(item);\n  }\n  \n  function index(filename_) {\n    debug('Calculating index of '+filename_);\n    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;\n  }\n  \n  function byIndex(a, b) {\n    if (index(a) > index(b)) {\n      return 1;\n    } else if (index(a) < index(b) ) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  function compress (filename, cb) {\n\n    var gzip = zlib.createGzip();\n    var inp = fs.createReadStream(filename);\n    var out = fs.createWriteStream(filename+\".gz\");\n    inp.pipe(gzip).pipe(out);\n    fs.unlink(filename, cb);\n\n  }\n\n  function increaseFileIndex (fileToRename, cb) {\n    var idx = index(fileToRename);\n    debug('Index of ' + fileToRename + ' is ' + idx);\n    if (idx < that.backups) {\n\n      var ext = path.extname(fileToRename);\n      var destination = filename + '.' + (idx+1);\n      if (that.options.compress && /^gz$/.test(ext.substring(1))) {\n        destination+=ext;\n      }\n      //on windows, you can get a EEXIST error if you rename a file to an existing file\n      //so, we'll try to delete the file we're renaming to first\n      fs.unlink(destination, function (err) {\n        //ignore err: if we could not delete, it's most likely that it doesn't exist\n        debug('Renaming ' + fileToRename + ' -> ' + destination);\n        fs.rename(path.join(path.dirname(filename), fileToRename), destination, function(err) {\n          if (err) {\n            cb(err);\n          } else {\n            if (that.options.compress && ext!=\".gz\") {\n              compress(destination, cb);\n            } else {\n              cb();\n            }\n          }\n        });\n      });\n    } else {\n      cb();\n    }\n  }\n\n  function renameTheFiles(cb) {\n    //roll the backups (rename file.n to file.n+1, where n <= numBackups)\n    debug(\"Renaming the old files\");\n    fs.readdir(path.dirname(filename), function (err, files) {\n      var filesToProcess = files.filter(justTheseFiles).sort(byIndex);\n      (function processOne(err) {\n        var file = filesToProcess.pop();\n        if (!file || err) { return cb(err); }\n        increaseFileIndex(file, processOne);\n      })();\n    });\n  }\n\n  debug(\"Rolling, rolling, rolling\");\n  this.closeTheStream(\n    renameTheFiles.bind(null,\n      this.openTheStream.bind(this,\n        callback)));\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}