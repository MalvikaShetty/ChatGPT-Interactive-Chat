{"ast":null,"code":"\"use strict\";\n\nvar ctXML = \"[Content_Types].xml\";\nfunction collectContentTypes(overrides, defaults, zip) {\n  var partNames = {};\n  for (var i = 0, len = overrides.length; i < len; i++) {\n    var override = overrides[i];\n    var contentType = override.getAttribute(\"ContentType\");\n    var partName = override.getAttribute(\"PartName\").substr(1);\n    partNames[partName] = contentType;\n  }\n  var _loop = function _loop(_i, _len) {\n    var def = defaults[_i];\n    var contentType = def.getAttribute(\"ContentType\");\n    var extension = def.getAttribute(\"Extension\");\n    // eslint-disable-next-line no-loop-func\n    zip.file(/./).map(function (_ref) {\n      var name = _ref.name;\n      if (name.slice(name.length - extension.length) === extension && !partNames[name] && name !== ctXML) {\n        partNames[name] = contentType;\n      }\n    });\n  };\n  for (var _i = 0, _len = defaults.length; _i < _len; _i++) {\n    _loop(_i, _len);\n  }\n  return partNames;\n}\nmodule.exports = collectContentTypes;","map":{"version":3,"names":["ctXML","collectContentTypes","overrides","defaults","zip","partNames","i","len","length","override","contentType","getAttribute","partName","substr","_loop","_i","_len","def","extension","file","map","_ref","name","slice","module","exports"],"sources":["C:/Users/malvi/Angular/template/node_modules/docxtemplater/js/collect-content-types.js"],"sourcesContent":["\"use strict\";\n\nvar ctXML = \"[Content_Types].xml\";\nfunction collectContentTypes(overrides, defaults, zip) {\n  var partNames = {};\n  for (var i = 0, len = overrides.length; i < len; i++) {\n    var override = overrides[i];\n    var contentType = override.getAttribute(\"ContentType\");\n    var partName = override.getAttribute(\"PartName\").substr(1);\n    partNames[partName] = contentType;\n  }\n  var _loop = function _loop(_i, _len) {\n    var def = defaults[_i];\n    var contentType = def.getAttribute(\"ContentType\");\n    var extension = def.getAttribute(\"Extension\");\n    // eslint-disable-next-line no-loop-func\n    zip.file(/./).map(function (_ref) {\n      var name = _ref.name;\n      if (name.slice(name.length - extension.length) === extension && !partNames[name] && name !== ctXML) {\n        partNames[name] = contentType;\n      }\n    });\n  };\n  for (var _i = 0, _len = defaults.length; _i < _len; _i++) {\n    _loop(_i, _len);\n  }\n  return partNames;\n}\nmodule.exports = collectContentTypes;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAG,qBAAqB;AACjC,SAASC,mBAAmB,CAACC,SAAS,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EACrD,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,SAAS,CAACM,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IACpD,IAAIG,QAAQ,GAAGP,SAAS,CAACI,CAAC,CAAC;IAC3B,IAAII,WAAW,GAAGD,QAAQ,CAACE,YAAY,CAAC,aAAa,CAAC;IACtD,IAAIC,QAAQ,GAAGH,QAAQ,CAACE,YAAY,CAAC,UAAU,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;IAC1DR,SAAS,CAACO,QAAQ,CAAC,GAAGF,WAAW;EACnC;EACA,IAAII,KAAK,GAAG,SAASA,KAAK,CAACC,EAAE,EAAEC,IAAI,EAAE;IACnC,IAAIC,GAAG,GAAGd,QAAQ,CAACY,EAAE,CAAC;IACtB,IAAIL,WAAW,GAAGO,GAAG,CAACN,YAAY,CAAC,aAAa,CAAC;IACjD,IAAIO,SAAS,GAAGD,GAAG,CAACN,YAAY,CAAC,WAAW,CAAC;IAC7C;IACAP,GAAG,CAACe,IAAI,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAUC,IAAI,EAAE;MAChC,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;MACpB,IAAIA,IAAI,CAACC,KAAK,CAACD,IAAI,CAACd,MAAM,GAAGU,SAAS,CAACV,MAAM,CAAC,KAAKU,SAAS,IAAI,CAACb,SAAS,CAACiB,IAAI,CAAC,IAAIA,IAAI,KAAKtB,KAAK,EAAE;QAClGK,SAAS,CAACiB,IAAI,CAAC,GAAGZ,WAAW;MAC/B;IACF,CAAC,CAAC;EACJ,CAAC;EACD,KAAK,IAAIK,EAAE,GAAG,CAAC,EAAEC,IAAI,GAAGb,QAAQ,CAACK,MAAM,EAAEO,EAAE,GAAGC,IAAI,EAAED,EAAE,EAAE,EAAE;IACxDD,KAAK,CAACC,EAAE,EAAEC,IAAI,CAAC;EACjB;EACA,OAAOX,SAAS;AAClB;AACAmB,MAAM,CAACC,OAAO,GAAGxB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}