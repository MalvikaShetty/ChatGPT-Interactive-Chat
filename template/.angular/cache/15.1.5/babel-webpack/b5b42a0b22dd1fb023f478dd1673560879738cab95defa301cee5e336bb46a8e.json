{"ast":null,"code":"var FileManagerComponent_1;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ChatService } from 'src/app/shared/services/chat.service';\nimport * as XLSX from 'xlsx';\nlet FileManagerComponent = FileManagerComponent_1 = class FileManagerComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n  }\n  ngOnInit() {}\n  //export myVariable: string = \"Hello, world!\";\n  xlsxfileUpload(event) {\n    //this.UploadedFile= true;\n    const selectedFile = event.target.files[0];\n    const fileReader = new FileReader();\n    fileReader.readAsBinaryString(selectedFile);\n    fileReader.onload = event => {\n      let binaryData = event.target.result;\n      let workbook = XLSX.read(binaryData, {\n        type: 'binary'\n      });\n      workbook.SheetNames.forEach(sheet => {\n        const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheet]);\n        FileManagerComponent_1.convertedToJsonString = JSON.stringify(data, undefined, 4);\n        //this.newStr =  this.convertedJson.substring(1, this.convertedJson.length-1);\n        // this.stringofJson = this.convertedJson.replace(/{|}/g, \" \").replace(/\\[|\\]/g, \" \");\n        //  this.jsonArrayFromExcel = JSON.parse(this.convertedExcelToJsonString);\n        //  this.headers = Object.keys(this.jsonArrayFromExcel[0]);\n        console.log(FileManagerComponent_1.convertedToJsonString);\n        //this.chatService.responseMessage( this.convertedExcelToJsonString);\n      });\n    };\n  }\n};\n\nFileManagerComponent = FileManagerComponent_1 = __decorate([Component({\n  selector: 'app-file-manager',\n  templateUrl: './file-manager.component.html',\n  styleUrls: ['./file-manager.component.scss']\n}), __metadata(\"design:paramtypes\", [ChatService])], FileManagerComponent);\nexport { FileManagerComponent };\nexport const myExportedProperty = FileManagerComponent.convertedToJsonString;","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,QAAQ,sCAAsC;AAClE,OAAO,KAAKC,IAAI,MAAM,MAAM;AAmBrB,IAAMC,oBAAoB,4BAA1B,MAAMA,oBAAoB;EAO/BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,QAAQ,IACR;EAEA;EAEDC,cAAc,CAACC,KAAS;IAErB;IAEA,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;IACnCD,UAAU,CAACE,kBAAkB,CAACL,YAAY,CAAC;IAC3CG,UAAU,CAACG,MAAM,GAAIP,KAAS,IAAG;MAC/B,IAAIQ,UAAU,GAAGR,KAAK,CAACE,MAAM,CAACO,MAAM;MACpC,IAAIC,QAAQ,GAAGhB,IAAI,CAACiB,IAAI,CAACH,UAAU,EAAC;QAACI,IAAI,EAAC;MAAQ,CAAC,CAAC;MACpDF,QAAQ,CAACG,UAAU,CAACC,OAAO,CAACC,KAAK,IAAG;QAClC,MAAMC,IAAI,GAAGtB,IAAI,CAACuB,KAAK,CAACC,aAAa,CAACR,QAAQ,CAACS,MAAM,CAACJ,KAAK,CAAC,CAAC;QAC7DK,sBAAoB,CAACC,qBAAqB,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,EAAEQ,SAAS,EAAC,CAAC,CAAC;QAC9E;QACD;QACD;QACA;QACCC,OAAO,CAACC,GAAG,CAAEN,sBAAoB,CAACC,qBAAqB,CAAC;QACxD;MACD,CAAC,CAAC;IACJ,CAAC;EACH;CAiGD;;AApIY1B,oBAAoB,wCARhCH,SAAS,CAAC;EACTmC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,mCAWiCpC,WAAW,KAPjCE,oBAAoB,CAoIhC;SApIYA,oBAAoB;AAsIjC,OAAO,MAAMmC,kBAAkB,GAAGnC,oBAAoB,CAAC0B,qBAAqB","names":["Component","ChatService","XLSX","FileManagerComponent","constructor","chatService","ngOnInit","xlsxfileUpload","event","selectedFile","target","files","fileReader","FileReader","readAsBinaryString","onload","binaryData","result","workbook","read","type","SheetNames","forEach","sheet","data","utils","sheet_to_json","Sheets","FileManagerComponent_1","convertedToJsonString","JSON","stringify","undefined","console","log","selector","templateUrl","styleUrls","myExportedProperty"],"sourceRoot":"","sources":["C:\\Users\\malvi\\Angular\\template\\src\\app\\components\\apps\\file-manager\\file-manager.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChatService } from 'src/app/shared/services/chat.service';\nimport * as XLSX from 'xlsx';\nimport { parse } from 'sql-parser';\nimport * as JSZip from 'jszip';\nimport { Document, Paragraph, TextRun } from 'docx';\nimport * as docx from 'docx';\n// import { docx } from 'docx-to-json';\nimport * as mammoth from 'mammoth';\nimport * as promisify from 'es6-promisify';\nimport * as Docxtemplater from 'docxtemplater';\n\n\n@Component({\n  selector: 'app-file-manager',\n  templateUrl: './file-manager.component.html',\n  styleUrls: ['./file-manager.component.scss']\n})\n\n\n\nexport class FileManagerComponent implements OnInit {\n\n\n  //convertedExcelToJsonString: string=\"\";\n  static convertedToJsonString: any;\n  \n\n  constructor(private chatService: ChatService) { }\n\n  ngOnInit() {\n  }\n\n  //export myVariable: string = \"Hello, world!\";\n\n xlsxfileUpload(event:any){\n    \n    //this.UploadedFile= true;\n \n    const selectedFile = event.target.files[0];\n    const fileReader = new FileReader();\n    fileReader.readAsBinaryString(selectedFile);\n    fileReader.onload = (event:any)=>{\n      let binaryData = event.target.result;\n      let workbook = XLSX.read(binaryData,{type:'binary'});\n      workbook.SheetNames.forEach(sheet =>{\n        const data = XLSX.utils.sheet_to_json(workbook.Sheets[sheet]);\n        FileManagerComponent.convertedToJsonString = JSON.stringify(data, undefined,4);\n        //this.newStr =  this.convertedJson.substring(1, this.convertedJson.length-1);\n       // this.stringofJson = this.convertedJson.replace(/{|}/g, \" \").replace(/\\[|\\]/g, \" \");\n      //  this.jsonArrayFromExcel = JSON.parse(this.convertedExcelToJsonString);\n      //  this.headers = Object.keys(this.jsonArrayFromExcel[0]);\n       console.log( FileManagerComponent.convertedToJsonString);\n       //this.chatService.responseMessage( this.convertedExcelToJsonString);\n      })\n    }\n  }\n\n\n  // sqlfileUpload(event:any){\n    \n  //   const selectedFile = event.target.files[0];\n  //   const fileReader = new FileReader();\n  //   fileReader.readAsText(selectedFile, 'UTF-8');\n  //   fileReader.onload = (event) => {\n  //     const result= parse(event.target.result);\n  //     const json = JSON.stringify(result);\n  //     console.log(json);\n  //     // console.log(FileManagerComponent.convertedToJsonString);\n  //   }\n  // }\n\n\n  // async parseWordFile(file: File): Promise<string> {\n  //   const fileReader = new FileReader();\n  //   return new Promise<string>((resolve, reject) => {\n  //     fileReader.onload = async () => {\n  //       const zip = new JSZip(fileReader.result);\n  //       const content = await zip.file('word/document.xml').async('string');\n  //       const doc = new Document().createFromXmlString(content);\n  //       const paragraphs = doc.getParagraphs().map((p: Paragraph) => {\n  //         const textRuns = p.getTextRuns().map((t: TextRun) => t.text);\n  //         return textRuns.join('');\n  //       });\n  //       resolve(JSON.stringify({ paragraphs }));\n  //     };\n  //     fileReader.onerror = () => {\n  //       reject(fileReader.error);\n  //     };\n  //     fileReader.readAsArrayBuffer(file);\n  //   });\n  // }\n\n  // async docfileUpload(event: any) {\n  //   const file: File = event.target.files[0];\n  //   const jsonString = await parseWordFile(file);\n  //   console.log(jsonString);\n  // }\n  // async docFileUpload(event: any) {\n  //   const file: File = event.target.files[0];\n  //   const fileReader = new FileReader();\n  //   fileReader.readAsArrayBuffer(file);\n  //   fileReader.onload = () => {\n  //     const arrayBuffer: any = fileReader.result;\n  //     const doc = new docx.Document(arrayBuffer);\n  //     const paragraphs = doc.getBody().getChildren();\n  //     const content = paragraphs.map((p) => p.getText());\n  //     const jsonContent = JSON.stringify(content);\n  //     console.log(jsonContent);\n  //   };\n  // }\n  // async docFileUpload(event: any): Promise<string> {\n  //   const file : File = event.target.files[0];\n  //   const readFile = promisify(mammoth.readFile);\n  //   const result = await mammoth.convertToHtml({ arrayBuffer: await file.arrayBuffer() });\n  //   const html = result.value;\n  //   // Convert the HTML to JSON using a JSON library\n  //   const json = JSON.stringify(html);\n  //   console.log(json + \" yay got converted\")\n  //   return json;\n  // }\n\n  // async docFileUpload(event: any): Promise<string> {\n  //   const file : File = event.target.files[0];\n  //   const buffer = await file.arrayBuffer();\n  //   const zip = new JSZip(buffer);\n  //   const doc = new Docxtemplater().loadZip(zip);\n  //   const data = doc.getFullData();\n  //   // Convert the data to JSON using a JSON library\n  //   const json =  JSON.stringify(data);\n  //   return json;\n  // }\n  // async onFileSelected(event: Event) {\n  //   const file = (event.target as HTMLInputElement).files[0];\n\n  //   if (file) {\n  //     const fileReader = new FileReader();\n\n  //     fileReader.onload = async () => {\n  //       const content = fileReader.result as ArrayBuffer;\n  //       const json = await docx(content);\n\n  //       const jsonStr = JSON.stringify(json);\n  //       const blob = new Blob([jsonStr], { type: 'application/json' });\n  //       fileSaver.saveAs(blob, `${file.name}.json`);\n\n  //     };\n\n  //     fileReader.readAsArrayBuffer(file);\n  //   }\n  // }\n\n  \n}\n\nexport const myExportedProperty = FileManagerComponent.convertedToJsonString;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}