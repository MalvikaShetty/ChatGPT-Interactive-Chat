{"ast":null,"code":"\"use strict\";\n\nvar BaseRollingFileStream = require('./BaseRollingFileStream'),\n  debug = require('../debug')('DateRollingFileStream'),\n  format = require('../date_format'),\n  fs = require('fs'),\n  util = require('util');\nmodule.exports = DateRollingFileStream;\nfunction DateRollingFileStream(filename, pattern, options, now) {\n  debug(\"Now is \" + now);\n  if (pattern && typeof pattern === 'object') {\n    now = options;\n    options = pattern;\n    pattern = null;\n  }\n  this.pattern = pattern || '.yyyy-MM-dd';\n  this.now = now || Date.now;\n  if (fs.existsSync(filename)) {\n    var stat = fs.statSync(filename);\n    this.lastTimeWeWroteSomething = format.asString(this.pattern, stat.mtime);\n  } else {\n    this.lastTimeWeWroteSomething = format.asString(this.pattern, new Date(this.now()));\n  }\n  this.baseFilename = filename;\n  this.alwaysIncludePattern = false;\n  if (options) {\n    if (options.alwaysIncludePattern) {\n      this.alwaysIncludePattern = true;\n      filename = this.baseFilename + this.lastTimeWeWroteSomething;\n    }\n    delete options.alwaysIncludePattern;\n    if (Object.keys(options).length === 0) {\n      options = null;\n    }\n  }\n  debug(\"this.now is \" + this.now + \", now is \" + now);\n  DateRollingFileStream.super_.call(this, filename, options);\n}\nutil.inherits(DateRollingFileStream, BaseRollingFileStream);\nDateRollingFileStream.prototype.shouldRoll = function () {\n  var lastTime = this.lastTimeWeWroteSomething,\n    thisTime = format.asString(this.pattern, new Date(this.now()));\n  debug(\"DateRollingFileStream.shouldRoll with now = \" + this.now() + \", thisTime = \" + thisTime + \", lastTime = \" + lastTime);\n  this.lastTimeWeWroteSomething = thisTime;\n  this.previousTime = lastTime;\n  return thisTime !== lastTime;\n};\nDateRollingFileStream.prototype.roll = function (filename, callback) {\n  var that = this;\n  debug(\"Starting roll\");\n  if (this.alwaysIncludePattern) {\n    this.filename = this.baseFilename + this.lastTimeWeWroteSomething;\n    this.closeTheStream(this.openTheStream.bind(this, callback));\n  } else {\n    var newFilename = this.baseFilename + this.previousTime;\n    this.closeTheStream(deleteAnyExistingFile.bind(null, renameTheCurrentFile.bind(null, this.openTheStream.bind(this, callback))));\n  }\n  function deleteAnyExistingFile(cb) {\n    //on windows, you can get a EEXIST error if you rename a file to an existing file\n    //so, we'll try to delete the file we're renaming to first\n    fs.unlink(newFilename, function (err) {\n      //ignore err: if we could not delete, it's most likely that it doesn't exist\n      cb();\n    });\n  }\n  function renameTheCurrentFile(cb) {\n    debug(\"Renaming the \" + filename + \" -> \" + newFilename);\n    fs.rename(filename, newFilename, cb);\n  }\n};","map":{"version":3,"names":["BaseRollingFileStream","require","debug","format","fs","util","module","exports","DateRollingFileStream","filename","pattern","options","now","Date","existsSync","stat","statSync","lastTimeWeWroteSomething","asString","mtime","baseFilename","alwaysIncludePattern","Object","keys","length","super_","call","inherits","prototype","shouldRoll","lastTime","thisTime","previousTime","roll","callback","that","closeTheStream","openTheStream","bind","newFilename","deleteAnyExistingFile","renameTheCurrentFile","cb","unlink","err","rename"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/streams/DateRollingFileStream.js"],"sourcesContent":["\"use strict\";\nvar BaseRollingFileStream = require('./BaseRollingFileStream')\n, debug = require('../debug')('DateRollingFileStream')\n, format = require('../date_format')\n, fs = require('fs')\n, util = require('util');\n\nmodule.exports = DateRollingFileStream;\n\nfunction DateRollingFileStream(filename, pattern, options, now) {\n  debug(\"Now is \" + now);\n  if (pattern && typeof(pattern) === 'object') {\n    now = options;\n    options = pattern;\n    pattern = null;\n  }\n  this.pattern = pattern || '.yyyy-MM-dd';\n  this.now = now || Date.now;\n\n  if (fs.existsSync(filename)) {\n    var stat = fs.statSync(filename);\n    this.lastTimeWeWroteSomething = format.asString(this.pattern, stat.mtime);\n  } else {\n    this.lastTimeWeWroteSomething = format.asString(this.pattern, new Date(this.now()));\n  }\n\n  this.baseFilename = filename;\n  this.alwaysIncludePattern = false;\n  \n  if (options) {\n    if (options.alwaysIncludePattern) {\n      this.alwaysIncludePattern = true;\n      filename = this.baseFilename + this.lastTimeWeWroteSomething;\n    }\n    delete options.alwaysIncludePattern;\n    if (Object.keys(options).length === 0) { \n      options = null; \n    }\n  }\n  debug(\"this.now is \" + this.now + \", now is \" + now);\n  \n  DateRollingFileStream.super_.call(this, filename, options);\n}\nutil.inherits(DateRollingFileStream, BaseRollingFileStream);\n\nDateRollingFileStream.prototype.shouldRoll = function() {\n  var lastTime = this.lastTimeWeWroteSomething,\n  thisTime = format.asString(this.pattern, new Date(this.now()));\n  \n  debug(\"DateRollingFileStream.shouldRoll with now = \" + \n        this.now() + \", thisTime = \" + thisTime + \", lastTime = \" + lastTime);\n  \n  this.lastTimeWeWroteSomething = thisTime;\n  this.previousTime = lastTime;\n  \n  return thisTime !== lastTime;\n};\n\nDateRollingFileStream.prototype.roll = function(filename, callback) {\n  var that = this;\n\n  debug(\"Starting roll\");\n\n  if (this.alwaysIncludePattern) {\n    this.filename = this.baseFilename + this.lastTimeWeWroteSomething;\n    this.closeTheStream(this.openTheStream.bind(this, callback));\n  } else {\n    var newFilename = this.baseFilename + this.previousTime;\n    this.closeTheStream(\n      deleteAnyExistingFile.bind(null,\n        renameTheCurrentFile.bind(null,\n          this.openTheStream.bind(this,\n            callback))));\n  }\n\n  function deleteAnyExistingFile(cb) {\n    //on windows, you can get a EEXIST error if you rename a file to an existing file\n    //so, we'll try to delete the file we're renaming to first\n    fs.unlink(newFilename, function (err) {\n      //ignore err: if we could not delete, it's most likely that it doesn't exist\n      cb();\n    });\n  }\n\n  function renameTheCurrentFile(cb) {\n    debug(\"Renaming the \" + filename + \" -> \" + newFilename);\n    fs.rename(filename, newFilename, cb);\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}