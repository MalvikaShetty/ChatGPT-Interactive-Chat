{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ChatDB } from '../../shared/data/chat/chat';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar today = new Date().toLocaleString('en-US', {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: true\n});\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.chat = [];\n    this.users = [];\n    this.chatHistory = [];\n    this.pastOpenchat = [];\n    this.base = \"https://localhost:44372/api/GPTStock\";\n    this._returnedChatGPTResponse = \"\";\n    this.listChats = [];\n    this.chat = ChatDB.chat;\n    this.users = ChatDB.chatUser;\n  }\n  //formChat:ChatMessages = new ChatMessages();\n  // Get User Data\n  getUsers() {\n    const users = new Observable(observer => {\n      observer.next(this.users);\n      observer.complete();\n    });\n    return users;\n  }\n  // Get cuurent user\n  getCurrentUser() {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.authenticate === 0;\n      });\n    }));\n  }\n  // chat to user\n  chatToUser(id) {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.id === id;\n      });\n    }));\n  }\n  // Get users chat\n  getChats(id) {\n    this.http.get(this.base + \"/getmessages/\" + id).toPromise().then(res => this.chatHistory = res);\n  }\n  // public getUserChat(): Observable<ChatMessages[]> {\n  //   const chat = new Observable(observer => {\n  //     observer.next(this.chat);\n  //     observer.complete();\n  //   });\n  //   return <Observable<ChatMessages[]>>chat;\n  // }\n  // // Get chat History\n  // public getChatHistory(id: number) {\n  //   return this.getUserChat().pipe(map(users => {\n  //     return users.find((item) => {\n  //       return item.userId === id;\n  //     });\n  //   }));\n  // }\n  // Send Message to user\n  sendMessage(chat, jsonData, questionInput) {\n    setTimeout(function () {\n      document.querySelector(\".chat-history\").scrollBy({\n        top: 200,\n        behavior: 'smooth'\n      });\n    }, 310);\n    this.responseMessage(chat, jsonData, questionInput);\n  }\n  wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  responseMessage(chat, jsonData, questionInput) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.post(this.base + \"/stocktable/\" + questionInput, jsonData, {\n        headers: headers\n      }).subscribe(result => {\n        this._returnedChatGPTResponse = result;\n      }, error => console.error(error));\n      setTimeout(() => {\n        this.listChats = [{\n          chatMessageId: 0,\n          userId: 1,\n          messages: []\n        }];\n        this.listChatsMessagesInService = {\n          messageId: 0,\n          userId: 1,\n          question: questionInput,\n          answer: this._returnedChatGPTResponse\n        };\n        this.listChats[0].messages.push(this.listChatsMessagesInService);\n        chat.messages.push(this.listChatsMessagesInService);\n        this.currentChatObject = Object.assign({}, chat);\n        this.currentJsonData = Object.assign({}, jsonData);\n        // const lastColumnIndex = this.listChats.length - 1;\n        // const lastIndexMessages = this.listChats[0].messages.length -1;\n        // const lastAnswer = this.listChats[0].messages[lastIndexMessages];\n        // lastAnswer.answer = this._returnedChatGPTResponse;\n        //chat.messages[chat.messages.length-1][3].answer = this._returnedChatGPTResponse;\n        console.log(this._returnedChatGPTResponse + \" edennmom \");\n        //console.log(this.listChats[0].messages[0].answer + \" damnnnnn \");\n        document.querySelector(\".chat-history\").scrollBy({\n          top: 200,\n          behavior: 'smooth'\n        });\n      }, 3000);\n      setTimeout(() => {\n        this.http.post(this.base + \"/postmessage\", chat).subscribe(error => console.error(error));\n        this.chatCompleted = true;\n        this.listChats = null;\n      }, 30000);\n    });\n  }\n  getMessageByChatId(id) {\n    return this.http.get(this.base + \"/getmessagesbychatId/\" + id).toPromise().then(res => this.pastOpenchat = res);\n  }\n}\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","map","ChatDB","HttpClient","HttpHeaders","today","Date","toLocaleString","hour","minute","hour12","ChatService","constructor","http","chat","users","chatUser","getUsers","observer","next","complete","getCurrentUser","pipe","find","item","authenticate","chatToUser","id","getChats","get","base","toPromise","then","res","chatHistory","sendMessage","jsonData","questionInput","setTimeout","document","querySelector","scrollBy","top","behavior","responseMessage","wait","ms","Promise","resolve","headers","post","subscribe","result","_returnedChatGPTResponse","error","console","listChats","chatMessageId","userId","messages","listChatsMessagesInService","messageId","question","answer","push","currentChatObject","currentJsonData","log","chatCompleted","getMessageByChatId","pastOpenchat","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malvi\\Angular\\template\\src\\app\\shared\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subscriber } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ChatDB } from '../../shared/data/chat/chat';\nimport { ChatMessages, ChatUsers, Messages } from '../model/chat.models';\nimport { HttpClient,HttpHeaders  } from '@angular/common/http';\n\nvar today = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  public observer: Subscriber<{}>;\n  public chat: any[] = []\n  public users: any[] = []\n  public chatHistory : ChatMessages[] = []\n  public pastOpenchat: ChatMessages[] = []\n  readonly base=\"https://localhost:44372/api/GPTStock\"\n  _returnedChatGPTResponse: string=\"\";\n  listChatsMessagesInService: Messages; \n  listChats: ChatMessages[]=[];\n  public chatCompleted:boolean;\n  public currentChatObject:any;\n  public currentJsonData:any;\n\n  constructor(private http:HttpClient) {\n    this.chat = ChatDB.chat\n    this.users = ChatDB.chatUser\n  }\n\n  //formChat:ChatMessages = new ChatMessages();\n \n\n  // Get User Data\n  public getUsers(): Observable<ChatUsers[]> {\n    const users = new Observable(observer => {\n      observer.next(this.users);\n      observer.complete();\n    });\n    return <Observable<ChatUsers[]>>users;\n  }\n\n  // Get cuurent user\n  public getCurrentUser() {\n    return this.getUsers().pipe(map(users => {\n      return users.find((item) => {\n        return item.authenticate === 0;\n      });\n    }));\n  }\n\n  // chat to user\n  public chatToUser(id: number) {\n    return this.getUsers().pipe(map(users => {\n      return users.find((item) => {\n        return item.id === id;\n      });\n    }));\n  }\n\n  // Get users chat\n\n  public getChats(id:any){\n    this.http.get(this.base + \"/getmessages/\" + id).toPromise().then(res=> this.chatHistory = res as ChatMessages[]);\n  }\n\n\n  // public getUserChat(): Observable<ChatMessages[]> {\n  //   const chat = new Observable(observer => {\n  //     observer.next(this.chat);\n  //     observer.complete();\n  //   });\n  //   return <Observable<ChatMessages[]>>chat;\n  // }\n\n  // // Get chat History\n  // public getChatHistory(id: number) {\n  //   return this.getUserChat().pipe(map(users => {\n  //     return users.find((item) => {\n  //       return item.userId === id;\n  //     });\n  //   }));\n  // }\n\n  // Send Message to user\n  public sendMessage(chat:ChatMessages, jsonData, questionInput:string){\n        setTimeout(function () {\n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\n        }, 310)\n       this.responseMessage(chat,jsonData,questionInput);\n  }\n\n  wait(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n \n  public async responseMessage(chat:ChatMessages,jsonData,questionInput:string) {\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\n    this.http.post<any>(this.base+\"/stocktable/\" + questionInput , jsonData , { headers: headers})\n    .subscribe(result => \n      { this._returnedChatGPTResponse = result;}, \n      error => console.error(error)); \n\n      setTimeout(()=> {\n        this.listChats = [{\n          chatMessageId:0,\n          userId: 1,\n          messages:[] \n          }];\n\n          this.listChatsMessagesInService={\n            messageId: 0,\n            userId: 1,\n            question: questionInput,\n            answer: this._returnedChatGPTResponse\n          };\n          this.listChats[0].messages.push(this.listChatsMessagesInService);\n          chat.messages.push(this.listChatsMessagesInService);\n          this.currentChatObject = { ...chat };\n          this.currentJsonData = { ...jsonData };\n         // const lastColumnIndex = this.listChats.length - 1;\n          // const lastIndexMessages = this.listChats[0].messages.length -1;\n          // const lastAnswer = this.listChats[0].messages[lastIndexMessages];\n          // lastAnswer.answer = this._returnedChatGPTResponse;\n          //chat.messages[chat.messages.length-1][3].answer = this._returnedChatGPTResponse;\n          console.log(this._returnedChatGPTResponse + \" edennmom \");\n          //console.log(this.listChats[0].messages[0].answer + \" damnnnnn \");\n          \n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\n      }, 3000);\n\n      setTimeout(()=> {\n        this.http.post(this.base + \"/postmessage\" , chat).subscribe( error => console.error(error));\n        this.chatCompleted=true;\n        this.listChats=null;\n      },30000)\n\n     \n  }\n\n  public getMessageByChatId(id:any){\n    return this.http.get(this.base + \"/getmessagesbychatId/\" + id).toPromise().then(res=> this.pastOpenchat = res as ChatMessages[]);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}