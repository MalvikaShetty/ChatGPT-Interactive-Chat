{"ast":null,"code":"\"use strict\";\n\nvar dateFormat = require('./date_format'),\n  os = require('os'),\n  eol = os.EOL || '\\n',\n  util = require('util'),\n  replacementRegExp = /%[sdj]/g,\n  layoutMakers = {\n    \"messagePassThrough\": function () {\n      return messagePassThroughLayout;\n    },\n    \"basic\": function () {\n      return basicLayout;\n    },\n    \"colored\": function () {\n      return colouredLayout;\n    },\n    \"coloured\": function () {\n      return colouredLayout;\n    },\n    \"pattern\": function (config) {\n      return patternLayout(config && config.pattern, config && config.tokens);\n    },\n    \"dummy\": function () {\n      return dummyLayout;\n    }\n  },\n  colours = {\n    ALL: \"grey\",\n    TRACE: \"blue\",\n    DEBUG: \"cyan\",\n    INFO: \"green\",\n    WARN: \"yellow\",\n    ERROR: \"red\",\n    FATAL: \"magenta\",\n    OFF: \"grey\"\n  };\nfunction wrapErrorsWithInspect(items) {\n  return items.map(function (item) {\n    if (item instanceof Error && item.stack) {\n      return {\n        inspect: function () {\n          return util.format(item) + '\\n' + item.stack;\n        }\n      };\n    } else {\n      return item;\n    }\n  });\n}\nfunction formatLogData(logData) {\n  var data = Array.isArray(logData) ? logData : Array.prototype.slice.call(arguments);\n  return util.format.apply(util, wrapErrorsWithInspect(data));\n}\nvar styles = {\n  //styles\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  //grayscale\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [90, 39],\n  //colors\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n};\nfunction colorizeStart(style) {\n  return style ? '\\x1B[' + styles[style][0] + 'm' : '';\n}\nfunction colorizeEnd(style) {\n  return style ? '\\x1B[' + styles[style][1] + 'm' : '';\n}\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize(str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\nfunction timestampLevelAndCategory(loggingEvent, colour, timezoneOffest) {\n  var output = colorize(formatLogData('[%s] [%s] %s - ', dateFormat.asString(loggingEvent.startTime, timezoneOffest), loggingEvent.level, loggingEvent.categoryName), colour);\n  return output;\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout(loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(loggingEvent, undefined, timezoneOffset) + formatLogData(loggingEvent.data);\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout(loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(loggingEvent, colours[loggingEvent.level.toString()], timezoneOffset) + formatLogData(loggingEvent.data);\n}\nfunction messagePassThroughLayout(loggingEvent) {\n  return formatLogData(loggingEvent.data);\n}\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %d date in various formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects. \n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { \"pid\" : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @param {String} Log format pattern String\n * @param {object} map object of different tokens\n * @param {number} timezone offset in minutes\n * @return {Function}\n * @author Stephan Strittmatter\n * @author Jan Schmidle\n */\nfunction patternLayout(pattern, tokens, timezoneOffset) {\n  var TTCC_CONVERSION_PATTERN = \"%r %p %c - %m%n\";\n  var regex = /%(-?[0-9]+)?(\\.?[0-9]+)?([\\[\\]cdhmnprzxy%])(\\{([^\\}]+)\\})?|([^%]+)/;\n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n  function categoryName(loggingEvent, specifier) {\n    var loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      var precision = parseInt(specifier, 10);\n      var loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  }\n  function formatAsDate(loggingEvent, specifier) {\n    var format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format == \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format == \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n      } else if (format == \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format == \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, timezoneOffset);\n  }\n  function hostname() {\n    return os.hostname().toString();\n  }\n  function formatMessage(loggingEvent) {\n    return formatLogData(loggingEvent.data);\n  }\n  function endOfLine() {\n    return eol;\n  }\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime, timezoneOffset);\n  }\n  function startColour(loggingEvent) {\n    return colorizeStart(colours[loggingEvent.level.toString()]);\n  }\n  function endColour(loggingEvent) {\n    return colorizeEnd(colours[loggingEvent.level.toString()]);\n  }\n  function percent() {\n    return '%';\n  }\n  function pid(loggingEvent) {\n    if (loggingEvent && loggingEvent.pid) {\n      return loggingEvent.pid;\n    } else {\n      return process.pid;\n    }\n  }\n  function clusterInfo(loggingEvent, specifier) {\n    if (loggingEvent.cluster && specifier) {\n      return specifier.replace('%m', loggingEvent.cluster.master).replace('%w', loggingEvent.cluster.worker).replace('%i', loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return loggingEvent.cluster.worker + '@' + loggingEvent.cluster.master;\n    } else {\n      return pid();\n    }\n  }\n  function userDefined(loggingEvent, specifier) {\n    if (typeof tokens[specifier] !== 'undefined') {\n      if (typeof tokens[specifier] === 'function') {\n        return tokens[specifier](loggingEvent);\n      } else {\n        return tokens[specifier];\n      }\n    }\n    return null;\n  }\n  var replacers = {\n    'c': categoryName,\n    'd': formatAsDate,\n    'h': hostname,\n    'm': formatMessage,\n    'n': endOfLine,\n    'p': logLevel,\n    'r': startTime,\n    '[': startColour,\n    ']': endColour,\n    'y': clusterInfo,\n    'z': pid,\n    '%': percent,\n    'x': userDefined\n  };\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n  function truncate(truncation, toTruncate) {\n    var len;\n    if (truncation) {\n      len = parseInt(truncation.substr(1), 10);\n      return toTruncate.substring(0, len);\n    }\n    return toTruncate;\n  }\n  function pad(padding, toPad) {\n    var len;\n    if (padding) {\n      if (padding.charAt(0) == \"-\") {\n        len = parseInt(padding.substr(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += \" \";\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = \" \" + toPad;\n        }\n      }\n    }\n    return toPad;\n  }\n  return function (loggingEvent) {\n    var formattedString = \"\";\n    var result;\n    var searchString = pattern;\n    while (result = regex.exec(searchString)) {\n      var matchedString = result[0];\n      var padding = result[1];\n      var truncation = result[2];\n      var conversionCharacter = result[3];\n      var specifier = result[5];\n      var text = result[6];\n\n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += \"\" + text;\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        var replacement = replaceToken(conversionCharacter, loggingEvent, specifier);\n\n        // Format the replacement according to any padding or\n        // truncation specified\n        replacement = truncate(truncation, replacement);\n        replacement = pad(padding, replacement);\n        formattedString += replacement;\n      }\n      searchString = searchString.substr(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n}\nmodule.exports = {\n  basicLayout: basicLayout,\n  messagePassThroughLayout: messagePassThroughLayout,\n  patternLayout: patternLayout,\n  colouredLayout: colouredLayout,\n  coloredLayout: colouredLayout,\n  dummyLayout: dummyLayout,\n  addLayout: function (name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout: function (name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  }\n};","map":{"version":3,"names":["dateFormat","require","os","eol","EOL","util","replacementRegExp","layoutMakers","messagePassThroughLayout","basicLayout","colouredLayout","config","patternLayout","pattern","tokens","dummyLayout","colours","ALL","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","OFF","wrapErrorsWithInspect","items","map","item","Error","stack","inspect","format","formatLogData","logData","data","Array","isArray","prototype","slice","call","arguments","apply","styles","colorizeStart","style","colorizeEnd","colorize","str","timestampLevelAndCategory","loggingEvent","colour","timezoneOffest","output","asString","startTime","level","categoryName","timezoneOffset","undefined","toString","TTCC_CONVERSION_PATTERN","regex","specifier","loggerName","precision","parseInt","loggerNameBits","split","length","join","formatAsDate","ISO8601_FORMAT","ISO8601_WITH_TZ_OFFSET_FORMAT","ABSOLUTETIME_FORMAT","DATETIME_FORMAT","hostname","formatMessage","endOfLine","logLevel","startColour","endColour","percent","pid","process","clusterInfo","cluster","replace","master","worker","workerId","userDefined","replacers","replaceToken","conversionCharacter","truncate","truncation","toTruncate","len","substr","substring","pad","padding","toPad","charAt","formattedString","result","searchString","exec","matchedString","text","replacement","index","module","exports","coloredLayout","addLayout","name","serializerGenerator","layout"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/layouts.js"],"sourcesContent":["\"use strict\";\nvar dateFormat = require('./date_format')\n, os = require('os')\n, eol = os.EOL || '\\n'\n, util = require('util')\n, replacementRegExp = /%[sdj]/g\n, layoutMakers = {\n  \"messagePassThrough\": function() { return messagePassThroughLayout; }, \n  \"basic\": function() { return basicLayout; }, \n  \"colored\": function() { return colouredLayout; }, \n  \"coloured\": function() { return colouredLayout; }, \n  \"pattern\": function (config) {\n    return patternLayout(config && config.pattern, config && config.tokens);\n\t},\n  \"dummy\": function() { return dummyLayout; }\n}\n, colours = {\n  ALL: \"grey\", \n  TRACE: \"blue\", \n  DEBUG: \"cyan\", \n  INFO: \"green\", \n  WARN: \"yellow\", \n  ERROR: \"red\", \n  FATAL: \"magenta\", \n  OFF: \"grey\"\n};\n\nfunction wrapErrorsWithInspect(items) {\n  return items.map(function(item) {\n    if ((item instanceof Error) && item.stack) {\n      return { inspect: function() { return util.format(item) + '\\n' + item.stack; } };\n    } else {\n      return item;\n    }\n  });\n}\n\nfunction formatLogData(logData) {\n  var data = Array.isArray(logData) ? logData : Array.prototype.slice.call(arguments);\n  return util.format.apply(util, wrapErrorsWithInspect(data));\n}\n\nvar styles = {\n    //styles\n  'bold'      : [1,  22],\n  'italic'    : [3,  23],\n  'underline' : [4,  24],\n  'inverse'   : [7,  27],\n  //grayscale\n  'white'     : [37, 39],\n  'grey'      : [90, 39],\n  'black'     : [90, 39],\n  //colors\n  'blue'      : [34, 39],\n  'cyan'      : [36, 39],\n  'green'     : [32, 39],\n  'magenta'   : [35, 39],\n  'red'       : [31, 39],\n  'yellow'    : [33, 39]\n};\n\nfunction colorizeStart(style) {\n  return style ? '\\x1B[' + styles[style][0] + 'm' : '';\n}\nfunction colorizeEnd(style) {\n  return style ? '\\x1B[' + styles[style][1] + 'm' : '';\n}\n/**\n * Taken from masylum's fork (https://github.com/masylum/log4js-node)\n */\nfunction colorize (str, style) {\n  return colorizeStart(style) + str + colorizeEnd(style);\n}\n\nfunction timestampLevelAndCategory(loggingEvent, colour, timezoneOffest) {\n  var output = colorize(\n    formatLogData(\n      '[%s] [%s] %s - '\n      , dateFormat.asString(loggingEvent.startTime, timezoneOffest)\n      , loggingEvent.level\n      , loggingEvent.categoryName\n    )\n    , colour\n  );\n  return output;\n}\n\n/**\n * BasicLayout is a simple layout for storing the logs. The logs are stored\n * in following format:\n * <pre>\n * [startTime] [logLevel] categoryName - message\\n\n * </pre>\n *\n * @author Stephan Strittmatter\n */\nfunction basicLayout (loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(loggingEvent, undefined, timezoneOffset) + formatLogData(loggingEvent.data);\n}\n\n/**\n * colouredLayout - taken from masylum's fork.\n * same as basicLayout, but with colours.\n */\nfunction colouredLayout (loggingEvent, timezoneOffset) {\n  return timestampLevelAndCategory(\n    loggingEvent,\n    colours[loggingEvent.level.toString()],\n    timezoneOffset\n  ) + formatLogData(loggingEvent.data);\n}\n\nfunction messagePassThroughLayout (loggingEvent) {\n  return formatLogData(loggingEvent.data);\n}\n\nfunction dummyLayout(loggingEvent) {\n  return loggingEvent.data[0];\n}\n\n/**\n * PatternLayout\n * Format for specifiers is %[padding].[truncation][field]{[format]}\n * e.g. %5.10p - left pad the log level by 5 characters, up to a max of 10\n * Fields can be any of:\n *  - %r time in toLocaleTimeString format\n *  - %p log level\n *  - %c log category\n *  - %h hostname\n *  - %m log data\n *  - %d date in various formats\n *  - %% %\n *  - %n newline\n *  - %z pid\n *  - %x{<tokenname>} add dynamic tokens to your log. Tokens are specified in the tokens parameter\n * You can use %[ and %] to define a colored block.\n *\n * Tokens are specified as simple key:value objects. \n * The key represents the token name whereas the value can be a string or function\n * which is called to extract the value to put in the log message. If token is not\n * found, it doesn't replace the field.\n *\n * A sample token would be: { \"pid\" : function() { return process.pid; } }\n *\n * Takes a pattern string, array of tokens and returns a layout function.\n * @param {String} Log format pattern String\n * @param {object} map object of different tokens\n * @param {number} timezone offset in minutes\n * @return {Function}\n * @author Stephan Strittmatter\n * @author Jan Schmidle\n */\nfunction patternLayout (pattern, tokens, timezoneOffset) {\n  var TTCC_CONVERSION_PATTERN  = \"%r %p %c - %m%n\";\n  var regex = /%(-?[0-9]+)?(\\.?[0-9]+)?([\\[\\]cdhmnprzxy%])(\\{([^\\}]+)\\})?|([^%]+)/;\n  \n  pattern = pattern || TTCC_CONVERSION_PATTERN;\n\n  function categoryName(loggingEvent, specifier) {\n    var loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      var precision = parseInt(specifier, 10);\n      var loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  }\n\n  function formatAsDate(loggingEvent, specifier) {\n    var format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format == \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format == \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT; \n      } else if (format == \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format == \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, timezoneOffset);\n  }\n  \n  function hostname() {\n    return os.hostname().toString();\n  }\n\n  function formatMessage(loggingEvent) {\n    return formatLogData(loggingEvent.data);\n  }\n  \n  function endOfLine() {\n    return eol;\n  }\n\n  function logLevel(loggingEvent) {\n    return loggingEvent.level.toString();\n  }\n\n  function startTime(loggingEvent) {\n    return dateFormat.asString('hh:mm:ss', loggingEvent.startTime, timezoneOffset);\n  }\n\n  function startColour(loggingEvent) {\n    return colorizeStart(colours[loggingEvent.level.toString()]);\n  }\n\n  function endColour(loggingEvent) {\n    return colorizeEnd(colours[loggingEvent.level.toString()]);\n  }\n\n  function percent() {\n    return '%';\n  }\n\n  function pid(loggingEvent) {\n    if (loggingEvent && loggingEvent.pid) {\n      return loggingEvent.pid;\n    } else {\n      return process.pid;\n    }\n  }\n  \n  function clusterInfo(loggingEvent, specifier) {\n    if (loggingEvent.cluster && specifier) {\n      return specifier\n        .replace('%m', loggingEvent.cluster.master)\n        .replace('%w', loggingEvent.cluster.worker)\n        .replace('%i', loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return loggingEvent.cluster.worker+'@'+loggingEvent.cluster.master;\n    } else {\n      return pid();\n    }\n  }\n\n  function userDefined(loggingEvent, specifier) {\n    if (typeof(tokens[specifier]) !== 'undefined') {\n      if (typeof(tokens[specifier]) === 'function') {\n        return tokens[specifier](loggingEvent);\n      } else {\n        return tokens[specifier];\n      }\n    }\n    return null;\n  }\n\n  var replacers = {\n    'c': categoryName,\n    'd': formatAsDate,\n    'h': hostname,\n    'm': formatMessage,\n    'n': endOfLine,\n    'p': logLevel,\n    'r': startTime,\n    '[': startColour,\n    ']': endColour,\n    'y': clusterInfo,\n    'z': pid,\n    '%': percent,\n    'x': userDefined\n  };\n\n  function replaceToken(conversionCharacter, loggingEvent, specifier) {\n    return replacers[conversionCharacter](loggingEvent, specifier);\n  }\n\n  function truncate(truncation, toTruncate) {\n    var len;\n    if (truncation) {\n      len = parseInt(truncation.substr(1), 10);\n      return toTruncate.substring(0, len);\n    }\n\n    return toTruncate;\n  }\n\n  function pad(padding, toPad) {\n    var len;\n    if (padding) {\n      if (padding.charAt(0) == \"-\") {\n        len = parseInt(padding.substr(1), 10);\n        // Right pad with spaces\n        while (toPad.length < len) {\n          toPad += \" \";\n        }\n      } else {\n        len = parseInt(padding, 10);\n        // Left pad with spaces\n        while (toPad.length < len) {\n          toPad = \" \" + toPad;\n        }\n      }\n    }\n    return toPad;\n  }\n  \n  return function(loggingEvent) {\n    var formattedString = \"\";\n    var result;\n    var searchString = pattern;\n    \n    while ((result = regex.exec(searchString))) {\n      var matchedString = result[0];\n      var padding = result[1];\n      var truncation = result[2];\n      var conversionCharacter = result[3];\n      var specifier = result[5];\n      var text = result[6];\n      \n      // Check if the pattern matched was just normal text\n      if (text) {\n        formattedString += \"\" + text;\n      } else {\n        // Create a raw replacement string based on the conversion\n        // character and specifier\n        var replacement = replaceToken(conversionCharacter, loggingEvent, specifier);\n\n        // Format the replacement according to any padding or\n        // truncation specified\n        replacement = truncate(truncation, replacement);\n        replacement = pad(padding, replacement);\n        formattedString += replacement;\n      }\n      searchString = searchString.substr(result.index + result[0].length);\n    }\n    return formattedString;\n  };\n\n}\n\nmodule.exports = {\n  basicLayout: basicLayout, \n  messagePassThroughLayout: messagePassThroughLayout, \n  patternLayout: patternLayout, \n  colouredLayout: colouredLayout, \n  coloredLayout: colouredLayout, \n  dummyLayout: dummyLayout,\n  addLayout: function(name, serializerGenerator) {\n    layoutMakers[name] = serializerGenerator;\n  },\n  layout: function(name, config) {\n    return layoutMakers[name] && layoutMakers[name](config);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}