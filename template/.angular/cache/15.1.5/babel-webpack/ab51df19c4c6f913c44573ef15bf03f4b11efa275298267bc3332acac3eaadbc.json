{"ast":null,"code":"\"use strict\";\n\nvar layouts = require('../layouts'),\n  path = require('path'),\n  fs = require('fs'),\n  streams = require('../streams'),\n  os = require('os'),\n  eol = os.EOL || '\\n',\n  openFiles = [],\n  levels = require('../levels');\n\n//close open files on process exit.\nprocess.on('exit', function () {\n  openFiles.forEach(function (file) {\n    file.end();\n  });\n});\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string \n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file, \n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize \n *   has been reached (default 5)\n * @param compress - flag that controls log file compression\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction fileAppender(file, layout, logSize, numBackups, compress, timezoneOffset) {\n  var bytesWritten = 0;\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n  function openTheStream(file, fileSize, numFiles) {\n    var stream;\n    if (fileSize) {\n      stream = new streams.RollingFileStream(file, fileSize, numFiles, {\n        \"compress\": compress\n      });\n    } else {\n      stream = fs.createWriteStream(file, {\n        encoding: \"utf8\",\n        mode: parseInt('0644', 8),\n        flags: 'a'\n      });\n    }\n    stream.on(\"error\", function (err) {\n      console.error(\"log4js.fileAppender - Writing to file %s, error happened \", file, err);\n    });\n    return stream;\n  }\n  var logFile = openTheStream(file, logSize, numBackups);\n\n  // push file to the stack of open handlers\n  openFiles.push(logFile);\n  return function (loggingEvent) {\n    logFile.write(layout(loggingEvent, timezoneOffset) + eol, \"utf8\");\n  };\n}\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config.compress, config.timezoneOffset);\n}\nfunction shutdown(cb) {\n  var completed = 0;\n  var error;\n  var complete = function (err) {\n    error = error || err;\n    completed++;\n    if (completed >= openFiles.length) {\n      cb(error);\n    }\n  };\n  if (!openFiles.length) {\n    return cb();\n  }\n  openFiles.forEach(function (file) {\n    if (!file.write(eol, \"utf-8\")) {\n      file.once('drain', function () {\n        file.end(complete);\n      });\n    } else {\n      file.end(complete);\n    }\n  });\n}\nexports.appender = fileAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;","map":{"version":3,"names":["layouts","require","path","fs","streams","os","eol","EOL","openFiles","levels","process","on","forEach","file","end","fileAppender","layout","logSize","numBackups","compress","timezoneOffset","bytesWritten","normalize","basicLayout","undefined","openTheStream","fileSize","numFiles","stream","RollingFileStream","createWriteStream","encoding","mode","parseInt","flags","err","console","error","logFile","push","loggingEvent","write","configure","config","options","type","cwd","absolute","filename","join","maxLogSize","backups","shutdown","cb","completed","complete","length","once","exports","appender"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/appenders/file.js"],"sourcesContent":["\"use strict\";\nvar layouts = require('../layouts')\n, path = require('path')\n, fs = require('fs')\n, streams = require('../streams')\n, os = require('os')\n, eol = os.EOL || '\\n'\n, openFiles = []\n, levels = require('../levels');\n\n//close open files on process exit.\nprocess.on('exit', function() {\n  openFiles.forEach(function (file) {\n    file.end();\n  });\n});\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string \n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file, \n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize \n *   has been reached (default 5)\n * @param compress - flag that controls log file compression\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction fileAppender (file, layout, logSize, numBackups, compress, timezoneOffset) {\n  var bytesWritten = 0;\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n\n  function openTheStream(file, fileSize, numFiles) {\n    var stream;\n    if (fileSize) {\n      stream = new streams.RollingFileStream(\n        file,\n        fileSize,\n        numFiles,\n        { \"compress\": compress }\n      );\n    } else {\n      stream = fs.createWriteStream(\n        file, \n        { encoding: \"utf8\", \n          mode: parseInt('0644', 8), \n          flags: 'a' }\n      );\n    }\n    stream.on(\"error\", function (err) {\n      console.error(\"log4js.fileAppender - Writing to file %s, error happened \", file, err);\n    });\n    return stream;\n  }\n\n  var logFile = openTheStream(file, logSize, numBackups);\n  \n  // push file to the stack of open handlers\n  openFiles.push(logFile);\n\n  return function(loggingEvent) {\n    logFile.write(layout(loggingEvent, timezoneOffset) + eol, \"utf8\");\n  };\n\n}\n\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config.compress, config.timezoneOffset);\n}\n\nfunction shutdown(cb) {\n  var completed = 0;\n  var error;\n  var complete = function(err) {\n    error = error || err;\n    completed++;\n    if (completed >= openFiles.length) {\n      cb(error);\n    }\n  };\n  if (!openFiles.length) {\n    return cb();\n  }\n  openFiles.forEach(function(file) {\n    if (!file.write(eol, \"utf-8\")) {\n      file.once('drain', function() {\n        file.end(complete);\n      });\n    } else {\n      file.end(complete);\n    }\n  });\n}\n\nexports.appender = fileAppender;\nexports.configure = configure;\nexports.shutdown = shutdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}