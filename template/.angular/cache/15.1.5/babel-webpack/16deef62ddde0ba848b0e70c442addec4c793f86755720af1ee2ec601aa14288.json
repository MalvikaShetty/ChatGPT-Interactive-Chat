{"ast":null,"code":"\"use strict\";\n\nvar debug = require('../debug')('fileSync'),\n  layouts = require('../layouts'),\n  path = require('path'),\n  fs = require('fs'),\n  streams = require('../streams'),\n  os = require('os'),\n  eol = os.EOL || '\\n';\nfunction RollingFileSync(filename, size, backups, options) {\n  debug(\"In RollingFileStream\");\n  function throwErrorIfArgumentsAreNotValid() {\n    if (!filename || !size || size <= 0) {\n      throw new Error(\"You must specify a filename and file size\");\n    }\n  }\n  throwErrorIfArgumentsAreNotValid();\n  this.filename = filename;\n  this.size = size;\n  this.backups = backups || 1;\n  this.options = options || {\n    encoding: 'utf8',\n    mode: parseInt('0644', 8),\n    flags: 'a'\n  };\n  this.currentSize = 0;\n  function currentFileSize(file) {\n    var fileSize = 0;\n    try {\n      fileSize = fs.statSync(file).size;\n    } catch (e) {\n      // file does not exist\n      fs.appendFileSync(filename, '');\n    }\n    return fileSize;\n  }\n  this.currentSize = currentFileSize(this.filename);\n}\nRollingFileSync.prototype.shouldRoll = function () {\n  debug(\"should roll with current size %d, and max size %d\", this.currentSize, this.size);\n  return this.currentSize >= this.size;\n};\nRollingFileSync.prototype.roll = function (filename) {\n  var that = this,\n    nameMatcher = new RegExp('^' + path.basename(filename));\n  function justTheseFiles(item) {\n    return nameMatcher.test(item);\n  }\n  function index(filename_) {\n    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;\n  }\n  function byIndex(a, b) {\n    if (index(a) > index(b)) {\n      return 1;\n    } else if (index(a) < index(b)) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n  function increaseFileIndex(fileToRename) {\n    var idx = index(fileToRename);\n    debug('Index of ' + fileToRename + ' is ' + idx);\n    if (idx < that.backups) {\n      //on windows, you can get a EEXIST error if you rename a file to an existing file\n      //so, we'll try to delete the file we're renaming to first\n      try {\n        fs.unlinkSync(filename + '.' + (idx + 1));\n      } catch (e) {\n        //ignore err: if we could not delete, it's most likely that it doesn't exist\n      }\n      debug('Renaming ' + fileToRename + ' -> ' + filename + '.' + (idx + 1));\n      fs.renameSync(path.join(path.dirname(filename), fileToRename), filename + '.' + (idx + 1));\n    }\n  }\n  function renameTheFiles() {\n    //roll the backups (rename file.n to file.n+1, where n <= numBackups)\n    debug(\"Renaming the old files\");\n    var files = fs.readdirSync(path.dirname(filename));\n    files.filter(justTheseFiles).sort(byIndex).reverse().forEach(increaseFileIndex);\n  }\n  debug(\"Rolling, rolling, rolling\");\n  renameTheFiles();\n};\nRollingFileSync.prototype.write = function (chunk, encoding) {\n  var that = this;\n  function writeTheChunk() {\n    debug(\"writing the chunk to the file\");\n    that.currentSize += chunk.length;\n    fs.appendFileSync(that.filename, chunk);\n  }\n  debug(\"in write\");\n  if (this.shouldRoll()) {\n    this.currentSize = 0;\n    this.roll(this.filename);\n  }\n  writeTheChunk();\n};\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string \n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file, \n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize \n *   has been reached (default 5)\n * @param timezoneOffset - optional timezone offset in minutes\n *   (default system local)\n */\nfunction fileAppender(file, layout, logSize, numBackups, timezoneOffset) {\n  debug(\"fileSync appender created\");\n  var bytesWritten = 0;\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n  function openTheStream(file, fileSize, numFiles) {\n    var stream;\n    if (fileSize) {\n      stream = new RollingFileSync(file, fileSize, numFiles);\n    } else {\n      stream = function (f) {\n        // create file if it doesn't exist\n        if (!fs.existsSync(f)) fs.appendFileSync(f, '');\n        return {\n          write: function (data) {\n            fs.appendFileSync(f, data);\n          }\n        };\n      }(file);\n    }\n    return stream;\n  }\n  var logFile = openTheStream(file, logSize, numBackups);\n  return function (loggingEvent) {\n    logFile.write(layout(loggingEvent, timezoneOffset) + eol);\n  };\n}\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config.timezoneOffset);\n}\nexports.appender = fileAppender;\nexports.configure = configure;","map":{"version":3,"names":["debug","require","layouts","path","fs","streams","os","eol","EOL","RollingFileSync","filename","size","backups","options","throwErrorIfArgumentsAreNotValid","Error","encoding","mode","parseInt","flags","currentSize","currentFileSize","file","fileSize","statSync","e","appendFileSync","prototype","shouldRoll","roll","that","nameMatcher","RegExp","basename","justTheseFiles","item","test","index","filename_","substring","length","byIndex","a","b","increaseFileIndex","fileToRename","idx","unlinkSync","renameSync","join","dirname","renameTheFiles","files","readdirSync","filter","sort","reverse","forEach","write","chunk","writeTheChunk","fileAppender","layout","logSize","numBackups","timezoneOffset","bytesWritten","normalize","basicLayout","undefined","openTheStream","numFiles","stream","f","existsSync","data","logFile","loggingEvent","configure","config","type","cwd","absolute","maxLogSize","exports","appender"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/appenders/fileSync.js"],"sourcesContent":["\"use strict\";\nvar debug = require('../debug')('fileSync')\n, layouts = require('../layouts')\n, path = require('path')\n, fs = require('fs')\n, streams = require('../streams')\n, os = require('os')\n, eol = os.EOL || '\\n'\n;\n\nfunction RollingFileSync (filename, size, backups, options) {\n  debug(\"In RollingFileStream\");\n\n  function throwErrorIfArgumentsAreNotValid() {\n    if (!filename || !size || size <= 0) {\n      throw new Error(\"You must specify a filename and file size\");\n    }\n  }\n  \n  throwErrorIfArgumentsAreNotValid();\n  \n  this.filename = filename;\n  this.size = size;\n  this.backups = backups || 1;\n  this.options = options || { encoding: 'utf8', mode: parseInt('0644', 8), flags: 'a' };\n  this.currentSize = 0;\n  \n  function currentFileSize(file) {\n    var fileSize = 0;\n    try {\n      fileSize = fs.statSync(file).size;\n    } catch (e) {\n      // file does not exist\n      fs.appendFileSync(filename, '');\n    }\n    return fileSize;\n  }\n\n  this.currentSize = currentFileSize(this.filename);\n}\n\nRollingFileSync.prototype.shouldRoll = function() {\n  debug(\"should roll with current size %d, and max size %d\", this.currentSize, this.size);\n  return this.currentSize >= this.size;\n};\n\nRollingFileSync.prototype.roll = function(filename) {\n  var that = this,\n  nameMatcher = new RegExp('^' + path.basename(filename));\n  \n  function justTheseFiles (item) {\n    return nameMatcher.test(item);\n  }\n  \n  function index(filename_) {\n    return parseInt(filename_.substring((path.basename(filename) + '.').length), 10) || 0;\n  }\n  \n  function byIndex(a, b) {\n    if (index(a) > index(b)) {\n      return 1;\n    } else if (index(a) < index(b) ) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  function increaseFileIndex (fileToRename) {\n    var idx = index(fileToRename);\n    debug('Index of ' + fileToRename + ' is ' + idx);\n    if (idx < that.backups) {\n      //on windows, you can get a EEXIST error if you rename a file to an existing file\n      //so, we'll try to delete the file we're renaming to first\n      try {\n        fs.unlinkSync(filename + '.' + (idx+1));\n      } catch(e) {\n        //ignore err: if we could not delete, it's most likely that it doesn't exist\n      }\n      \n      debug('Renaming ' + fileToRename + ' -> ' + filename + '.' + (idx+1));\n      fs.renameSync(path.join(path.dirname(filename), fileToRename), filename + '.' + (idx + 1));\n    }\n  }\n\n  function renameTheFiles() {\n    //roll the backups (rename file.n to file.n+1, where n <= numBackups)\n    debug(\"Renaming the old files\");\n    \n    var files = fs.readdirSync(path.dirname(filename));\n    files.filter(justTheseFiles).sort(byIndex).reverse().forEach(increaseFileIndex);\n  }\n\n  debug(\"Rolling, rolling, rolling\");\n  renameTheFiles();\n};\n\nRollingFileSync.prototype.write = function(chunk, encoding) {\n  var that = this;\n  \n  \n  function writeTheChunk() {\n    debug(\"writing the chunk to the file\");\n    that.currentSize += chunk.length;\n    fs.appendFileSync(that.filename, chunk);\n  }\n\n  debug(\"in write\");\n  \n\n  if (this.shouldRoll()) {\n    this.currentSize = 0;\n    this.roll(this.filename);\n  }\n  \n  writeTheChunk();\n};\n\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logevent and returns a string \n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file, \n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize \n *   has been reached (default 5)\n * @param timezoneOffset - optional timezone offset in minutes\n *   (default system local)\n */\nfunction fileAppender (file, layout, logSize, numBackups, timezoneOffset) {\n  debug(\"fileSync appender created\");\n  var bytesWritten = 0;\n  file = path.normalize(file);\n  layout = layout || layouts.basicLayout;\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  //there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n\n  function openTheStream(file, fileSize, numFiles) {\n    var stream;\n    \n    if (fileSize) {\n      stream = new RollingFileSync(\n        file,\n        fileSize,\n        numFiles\n      );\n    } else {\n      stream = (function(f) {\n        // create file if it doesn't exist\n        if (!fs.existsSync(f))\n            fs.appendFileSync(f, '');\n        \n        return {\n            write: function(data) {\n                fs.appendFileSync(f, data);\n            }\n        };\n      })(file);\n    }\n\n    return stream;\n  }\n\n  var logFile = openTheStream(file, logSize, numBackups);\n  \n  return function(loggingEvent) {\n    logFile.write(layout(loggingEvent, timezoneOffset) + eol);\n  };\n}\n\nfunction configure(config, options) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  if (options && options.cwd && !config.absolute) {\n    config.filename = path.join(options.cwd, config.filename);\n  }\n\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config.timezoneOffset);\n}\n\nexports.appender = fileAppender;\nexports.configure = configure;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}