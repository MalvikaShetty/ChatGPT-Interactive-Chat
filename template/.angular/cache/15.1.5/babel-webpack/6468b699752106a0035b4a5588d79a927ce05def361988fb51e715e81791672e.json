{"ast":null,"code":"\"use strict\";\n\nvar zlib = require('zlib');\nvar layouts = require('../layouts');\nvar levels = require('../levels');\nvar dgram = require('dgram');\nvar util = require('util');\nvar debug = require('../debug')('GELF Appender');\nvar LOG_EMERG = 0; // system is unusable\nvar LOG_ALERT = 1; // action must be taken immediately\nvar LOG_CRIT = 2; // critical conditions\nvar LOG_ERR = 3; // error conditions\nvar LOG_ERROR = 3; // because people WILL typo\nvar LOG_WARNING = 4; // warning conditions\nvar LOG_NOTICE = 5; // normal, but significant, condition\nvar LOG_INFO = 6; // informational message\nvar LOG_DEBUG = 7; // debug-level message\n\nvar levelMapping = {};\nlevelMapping[levels.ALL] = LOG_DEBUG;\nlevelMapping[levels.TRACE] = LOG_DEBUG;\nlevelMapping[levels.DEBUG] = LOG_DEBUG;\nlevelMapping[levels.INFO] = LOG_INFO;\nlevelMapping[levels.WARN] = LOG_WARNING;\nlevelMapping[levels.ERROR] = LOG_ERR;\nlevelMapping[levels.FATAL] = LOG_CRIT;\n\n/**\n * GELF appender that supports sending UDP packets to a GELF compatible server such as Graylog\n *\n * @param layout a function that takes a logevent and returns a string (defaults to none).\n * @param host - host to which to send logs (default:localhost)\n * @param port - port at which to send logs to (default:12201)\n * @param hostname - hostname of the current host (default:os hostname)\n * @param facility - facility to log to (default:nodejs-server)\n */\nfunction gelfAppender(layout, host, port, hostname, facility) {\n  var config, customFields;\n  if (typeof host === 'object') {\n    config = host;\n    host = config.host;\n    port = config.port;\n    hostname = config.hostname;\n    facility = config.facility;\n    customFields = config.customFields;\n  }\n  host = host || 'localhost';\n  port = port || 12201;\n  hostname = hostname || require('os').hostname();\n  layout = layout || layouts.messagePassThroughLayout;\n  var defaultCustomFields = customFields || {};\n  if (facility) {\n    defaultCustomFields['_facility'] = facility;\n  }\n  var client = dgram.createSocket(\"udp4\");\n  process.on('exit', function () {\n    if (client) client.close();\n  });\n\n  /**\n   * Add custom fields (start with underscore ) \n   * - if the first object passed to the logger contains 'GELF' field, \n   *   copy the underscore fields to the message\n   * @param loggingEvent\n   * @param msg\n   */\n  function addCustomFields(loggingEvent, msg) {\n    /* append defaultCustomFields firsts */\n    Object.keys(defaultCustomFields).forEach(function (key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) && key !== \"_id\") {\n        msg[key] = defaultCustomFields[key];\n      }\n    });\n\n    /* append custom fields per message */\n    var data = loggingEvent.data;\n    if (!Array.isArray(data) || data.length === 0) return;\n    var firstData = data[0];\n    if (!firstData.GELF) return; // identify with GELF field defined\n    // Remove the GELF key, some gelf supported logging systems drop the message with it\n    delete firstData.GELF;\n    Object.keys(firstData).forEach(function (key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) || key !== \"_id\") {\n        msg[key] = firstData[key];\n      }\n    });\n\n    /* the custom field object should be removed, so it will not be looged by the later appenders */\n    loggingEvent.data.shift();\n  }\n  function preparePacket(loggingEvent) {\n    var msg = {};\n    addCustomFields(loggingEvent, msg);\n    msg.short_message = layout(loggingEvent);\n    msg.version = \"1.1\";\n    msg.timestamp = msg.timestamp || new Date().getTime() / 1000; // log should use millisecond \n    msg.host = hostname;\n    msg.level = levelMapping[loggingEvent.level || levels.DEBUG];\n    return msg;\n  }\n  function sendPacket(packet) {\n    try {\n      client.send(packet, 0, packet.length, port, host);\n    } catch (e) {}\n  }\n  return function (loggingEvent) {\n    var message = preparePacket(loggingEvent);\n    zlib.gzip(new Buffer(JSON.stringify(message)), function (err, packet) {\n      if (err) {\n        console.error(err.stack);\n      } else {\n        if (packet.length > 8192) {\n          debug(\"Message packet length (\" + packet.length + \") is larger than 8k. Not sending\");\n        } else {\n          sendPacket(packet);\n        }\n      }\n    });\n  };\n}\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return gelfAppender(layout, config);\n}\nexports.appender = gelfAppender;\nexports.configure = configure;","map":{"version":3,"names":["zlib","require","layouts","levels","dgram","util","debug","LOG_EMERG","LOG_ALERT","LOG_CRIT","LOG_ERR","LOG_ERROR","LOG_WARNING","LOG_NOTICE","LOG_INFO","LOG_DEBUG","levelMapping","ALL","TRACE","DEBUG","INFO","WARN","ERROR","FATAL","gelfAppender","layout","host","port","hostname","facility","config","customFields","messagePassThroughLayout","defaultCustomFields","client","createSocket","process","on","close","addCustomFields","loggingEvent","msg","Object","keys","forEach","key","match","data","Array","isArray","length","firstData","GELF","shift","preparePacket","short_message","version","timestamp","Date","getTime","level","sendPacket","packet","send","e","message","gzip","Buffer","JSON","stringify","err","console","error","stack","configure","type","exports","appender"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-to-json/node_modules/log4js/lib/appenders/gelf.js"],"sourcesContent":["\"use strict\";\nvar zlib = require('zlib');\nvar layouts = require('../layouts');\nvar levels = require('../levels');\nvar dgram = require('dgram');\nvar util = require('util');\nvar debug = require('../debug')('GELF Appender');\n\nvar LOG_EMERG=0;    // system is unusable\nvar LOG_ALERT=1;    // action must be taken immediately\nvar LOG_CRIT=2;     // critical conditions\nvar LOG_ERR=3;      // error conditions\nvar LOG_ERROR=3;    // because people WILL typo\nvar LOG_WARNING=4;  // warning conditions\nvar LOG_NOTICE=5;   // normal, but significant, condition\nvar LOG_INFO=6;     // informational message\nvar LOG_DEBUG=7;    // debug-level message\n\nvar levelMapping = {};\nlevelMapping[levels.ALL] = LOG_DEBUG;\nlevelMapping[levels.TRACE] = LOG_DEBUG;\nlevelMapping[levels.DEBUG] = LOG_DEBUG;\nlevelMapping[levels.INFO] = LOG_INFO;\nlevelMapping[levels.WARN] = LOG_WARNING;\nlevelMapping[levels.ERROR] = LOG_ERR;\nlevelMapping[levels.FATAL] = LOG_CRIT;\n\n/**\n * GELF appender that supports sending UDP packets to a GELF compatible server such as Graylog\n *\n * @param layout a function that takes a logevent and returns a string (defaults to none).\n * @param host - host to which to send logs (default:localhost)\n * @param port - port at which to send logs to (default:12201)\n * @param hostname - hostname of the current host (default:os hostname)\n * @param facility - facility to log to (default:nodejs-server)\n */\nfunction gelfAppender (layout, host, port, hostname, facility) {\n  var config, customFields;\n  if (typeof(host) === 'object') {\n    config = host;\n    host = config.host;\n    port = config.port;\n    hostname = config.hostname;\n    facility = config.facility;\n    customFields = config.customFields;\n  }\n  \n  host = host || 'localhost';\n  port = port || 12201;\n  hostname = hostname || require('os').hostname();\n  layout = layout || layouts.messagePassThroughLayout;\n\n  var defaultCustomFields = customFields || {};\n\n  if(facility) {\n    defaultCustomFields['_facility'] = facility;\n  }\n\n  var client = dgram.createSocket(\"udp4\");\n  \n  process.on('exit', function() {\n    if (client) client.close();\n  });\n\n  /**\n   * Add custom fields (start with underscore ) \n   * - if the first object passed to the logger contains 'GELF' field, \n   *   copy the underscore fields to the message\n   * @param loggingEvent\n   * @param msg\n   */\n  function addCustomFields(loggingEvent, msg){\n\n    /* append defaultCustomFields firsts */\n    Object.keys(defaultCustomFields).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) && key !== \"_id\") { \n        msg[key] = defaultCustomFields[key];\n      }\n    });\n\n    /* append custom fields per message */\n    var data = loggingEvent.data;\n    if (!Array.isArray(data) || data.length === 0) return;\n    var firstData = data[0];\n    \n    if (!firstData.GELF) return; // identify with GELF field defined\n    // Remove the GELF key, some gelf supported logging systems drop the message with it\n    delete firstData.GELF;\n    Object.keys(firstData).forEach(function(key) {\n      // skip _id field for graylog2, skip keys not starts with UNDERSCORE\n      if (key.match(/^_/) || key !== \"_id\") { \n        msg[key] = firstData[key];\n      }\n    });\n    \n    /* the custom field object should be removed, so it will not be looged by the later appenders */\n    loggingEvent.data.shift(); \n  }\n \n  function preparePacket(loggingEvent) {\n    var msg = {};\n    addCustomFields(loggingEvent, msg);\n    msg.short_message = layout(loggingEvent);\n    \n    msg.version=\"1.1\";\n    msg.timestamp = msg.timestamp || new Date().getTime() / 1000; // log should use millisecond \n    msg.host = hostname;\n    msg.level = levelMapping[loggingEvent.level || levels.DEBUG];\n    return msg;\n  }\n  \n  function sendPacket(packet) {\n    try {\n      client.send(packet, 0, packet.length, port, host);\n    } catch(e) {}\n  }\n\n  return function(loggingEvent) {\n    var message = preparePacket(loggingEvent);\n    zlib.gzip(new Buffer(JSON.stringify(message)), function(err, packet) {\n      if (err) {\n        console.error(err.stack);\n      } else {\n        if (packet.length > 8192) {\n          debug(\"Message packet length (\" + packet.length + \") is larger than 8k. Not sending\");\n        } else {\n          sendPacket(packet);\n        }\n      }\n    });\n  };\n}\n\nfunction configure(config) {\n  var layout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n  return gelfAppender(layout, config);\n}\n\nexports.appender = gelfAppender;\nexports.configure = configure;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}