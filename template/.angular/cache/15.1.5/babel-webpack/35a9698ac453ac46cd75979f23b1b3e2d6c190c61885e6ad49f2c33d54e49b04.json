{"ast":null,"code":"// Generated by CoffeeScript 1.8.0\n(function () {\n  var Lexer;\n  Lexer = function () {\n    var BOOLEAN, DBLSTRING, LITERAL, MATH, MATH_MULTI, NUMBER, PARAMETER, SEPARATOR, SQL_CONDITIONALS, SQL_FUNCTIONS, SQL_OPERATORS, SQL_SORT_ORDERS, STAR, STRING, SUB_SELECT_OP, SUB_SELECT_UNARY_OP, WHITESPACE;\n    function Lexer(sql, opts) {\n      var bytesConsumed, i;\n      if (opts == null) {\n        opts = {};\n      }\n      this.sql = sql;\n      this.preserveWhitespace = opts.preserveWhitespace || false;\n      this.tokens = [];\n      this.currentLine = 1;\n      i = 0;\n      while (this.chunk = sql.slice(i)) {\n        bytesConsumed = this.keywordToken() || this.starToken() || this.booleanToken() || this.functionToken() || this.windowExtension() || this.sortOrderToken() || this.seperatorToken() || this.operatorToken() || this.mathToken() || this.dotToken() || this.conditionalToken() || this.subSelectOpToken() || this.subSelectUnaryOpToken() || this.numberToken() || this.stringToken() || this.parameterToken() || this.parensToken() || this.whitespaceToken() || this.literalToken();\n        if (bytesConsumed < 1) {\n          throw new Error(\"NOTHING CONSUMED: Stopped at - '\" + this.chunk.slice(0, 30) + \"'\");\n        }\n        i += bytesConsumed;\n      }\n      this.token('EOF', '');\n      this.postProcess();\n    }\n    Lexer.prototype.postProcess = function () {\n      var i, next_token, token, _i, _len, _ref, _results;\n      _ref = this.tokens;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        token = _ref[i];\n        if (token[0] === 'STAR') {\n          next_token = this.tokens[i + 1];\n          if (!(next_token[0] === 'SEPARATOR' || next_token[0] === 'FROM')) {\n            _results.push(token[0] = 'MATH_MULTI');\n          } else {\n            _results.push(void 0);\n          }\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n    Lexer.prototype.token = function (name, value) {\n      return this.tokens.push([name, value, this.currentLine]);\n    };\n    Lexer.prototype.tokenizeFromRegex = function (name, regex, part, lengthPart, output) {\n      var match, partMatch;\n      if (part == null) {\n        part = 0;\n      }\n      if (lengthPart == null) {\n        lengthPart = part;\n      }\n      if (output == null) {\n        output = true;\n      }\n      if (!(match = regex.exec(this.chunk))) {\n        return 0;\n      }\n      partMatch = match[part];\n      if (output) {\n        this.token(name, partMatch);\n      }\n      return match[lengthPart].length;\n    };\n    Lexer.prototype.tokenizeFromWord = function (name, word) {\n      var match, matcher;\n      if (word == null) {\n        word = name;\n      }\n      word = this.regexEscape(word);\n      matcher = /^\\w+$/.test(word) ? new RegExp(\"^(\" + word + \")\\\\b\", 'ig') : new RegExp(\"^(\" + word + \")\", 'ig');\n      match = matcher.exec(this.chunk);\n      if (!match) {\n        return 0;\n      }\n      this.token(name, match[1]);\n      return match[1].length;\n    };\n    Lexer.prototype.tokenizeFromList = function (name, list) {\n      var entry, ret, _i, _len;\n      ret = 0;\n      for (_i = 0, _len = list.length; _i < _len; _i++) {\n        entry = list[_i];\n        ret = this.tokenizeFromWord(name, entry);\n        if (ret > 0) {\n          break;\n        }\n      }\n      return ret;\n    };\n    Lexer.prototype.keywordToken = function () {\n      return this.tokenizeFromWord('SELECT') || this.tokenizeFromWord('DISTINCT') || this.tokenizeFromWord('FROM') || this.tokenizeFromWord('WHERE') || this.tokenizeFromWord('GROUP') || this.tokenizeFromWord('ORDER') || this.tokenizeFromWord('BY') || this.tokenizeFromWord('HAVING') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('JOIN') || this.tokenizeFromWord('LEFT') || this.tokenizeFromWord('RIGHT') || this.tokenizeFromWord('INNER') || this.tokenizeFromWord('OUTER') || this.tokenizeFromWord('ON') || this.tokenizeFromWord('AS') || this.tokenizeFromWord('UNION') || this.tokenizeFromWord('ALL') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('OFFSET') || this.tokenizeFromWord('FETCH') || this.tokenizeFromWord('ROW') || this.tokenizeFromWord('ROWS') || this.tokenizeFromWord('ONLY') || this.tokenizeFromWord('NEXT') || this.tokenizeFromWord('FIRST');\n    };\n    Lexer.prototype.dotToken = function () {\n      return this.tokenizeFromWord('DOT', '.');\n    };\n    Lexer.prototype.operatorToken = function () {\n      return this.tokenizeFromList('OPERATOR', SQL_OPERATORS);\n    };\n    Lexer.prototype.mathToken = function () {\n      return this.tokenizeFromList('MATH', MATH) || this.tokenizeFromList('MATH_MULTI', MATH_MULTI);\n    };\n    Lexer.prototype.conditionalToken = function () {\n      return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);\n    };\n    Lexer.prototype.subSelectOpToken = function () {\n      return this.tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP);\n    };\n    Lexer.prototype.subSelectUnaryOpToken = function () {\n      return this.tokenizeFromList('SUB_SELECT_UNARY_OP', SUB_SELECT_UNARY_OP);\n    };\n    Lexer.prototype.functionToken = function () {\n      return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS);\n    };\n    Lexer.prototype.sortOrderToken = function () {\n      return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);\n    };\n    Lexer.prototype.booleanToken = function () {\n      return this.tokenizeFromList('BOOLEAN', BOOLEAN);\n    };\n    Lexer.prototype.starToken = function () {\n      return this.tokenizeFromRegex('STAR', STAR);\n    };\n    Lexer.prototype.seperatorToken = function () {\n      return this.tokenizeFromRegex('SEPARATOR', SEPARATOR);\n    };\n    Lexer.prototype.literalToken = function () {\n      return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0);\n    };\n    Lexer.prototype.numberToken = function () {\n      return this.tokenizeFromRegex('NUMBER', NUMBER);\n    };\n    Lexer.prototype.parameterToken = function () {\n      return this.tokenizeFromRegex('PARAMETER', PARAMETER);\n    };\n    Lexer.prototype.stringToken = function () {\n      return this.tokenizeFromRegex('STRING', STRING, 1, 0) || this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);\n    };\n    Lexer.prototype.parensToken = function () {\n      return this.tokenizeFromRegex('LEFT_PAREN', /^\\(/) || this.tokenizeFromRegex('RIGHT_PAREN', /^\\)/);\n    };\n    Lexer.prototype.windowExtension = function () {\n      var match;\n      match = /^\\.(win):(length|time)/i.exec(this.chunk);\n      if (!match) {\n        return 0;\n      }\n      this.token('WINDOW', match[1]);\n      this.token('WINDOW_FUNCTION', match[2]);\n      return match[0].length;\n    };\n    Lexer.prototype.whitespaceToken = function () {\n      var match, newlines, partMatch;\n      if (!(match = WHITESPACE.exec(this.chunk))) {\n        return 0;\n      }\n      partMatch = match[0];\n      newlines = partMatch.replace(/[^\\n]/, '').length;\n      this.currentLine += newlines;\n      if (this.preserveWhitespace) {\n        this.token(name, partMatch);\n      }\n      return partMatch.length;\n    };\n    Lexer.prototype.regexEscape = function (str) {\n      return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    };\n    SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];\n    SQL_SORT_ORDERS = ['ASC', 'DESC'];\n    SQL_OPERATORS = ['=', '!=', '>=', '>', '<=', '<>', '<', 'LIKE', 'IS NOT', 'IS'];\n    SUB_SELECT_OP = ['IN', 'NOT IN', 'ANY', 'ALL', 'SOME'];\n    SUB_SELECT_UNARY_OP = ['EXISTS'];\n    SQL_CONDITIONALS = ['AND', 'OR'];\n    BOOLEAN = ['TRUE', 'FALSE', 'NULL'];\n    MATH = ['+', '-'];\n    MATH_MULTI = ['/', '*'];\n    STAR = /^\\*/;\n    SEPARATOR = /^,/;\n    WHITESPACE = /^[ \\n\\r]+/;\n    LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;\n    PARAMETER = /^\\$[0-9]+/;\n    NUMBER = /^[0-9]+(\\.[0-9]+)?/;\n    STRING = /^'([^\\\\']*(?:\\\\.[^\\\\']*)*)'/;\n    DBLSTRING = /^\"([^\\\\\"]*(?:\\\\.[^\\\\\"]*)*)\"/;\n    return Lexer;\n  }();\n  exports.tokenize = function (sql, opts) {\n    return new Lexer(sql, opts).tokens;\n  };\n}).call(this);","map":{"version":3,"names":["Lexer","BOOLEAN","DBLSTRING","LITERAL","MATH","MATH_MULTI","NUMBER","PARAMETER","SEPARATOR","SQL_CONDITIONALS","SQL_FUNCTIONS","SQL_OPERATORS","SQL_SORT_ORDERS","STAR","STRING","SUB_SELECT_OP","SUB_SELECT_UNARY_OP","WHITESPACE","sql","opts","bytesConsumed","i","preserveWhitespace","tokens","currentLine","chunk","slice","keywordToken","starToken","booleanToken","functionToken","windowExtension","sortOrderToken","seperatorToken","operatorToken","mathToken","dotToken","conditionalToken","subSelectOpToken","subSelectUnaryOpToken","numberToken","stringToken","parameterToken","parensToken","whitespaceToken","literalToken","Error","token","postProcess","prototype","next_token","_i","_len","_ref","_results","length","push","name","value","tokenizeFromRegex","regex","part","lengthPart","output","match","partMatch","exec","tokenizeFromWord","word","matcher","regexEscape","test","RegExp","tokenizeFromList","list","entry","ret","newlines","replace","str","exports","tokenize","call"],"sources":["C:/Users/malvi/Angular/template/node_modules/sql-parser/lib/lexer.js"],"sourcesContent":["// Generated by CoffeeScript 1.8.0\n(function() {\n  var Lexer;\n\n  Lexer = (function() {\n    var BOOLEAN, DBLSTRING, LITERAL, MATH, MATH_MULTI, NUMBER, PARAMETER, SEPARATOR, SQL_CONDITIONALS, SQL_FUNCTIONS, SQL_OPERATORS, SQL_SORT_ORDERS, STAR, STRING, SUB_SELECT_OP, SUB_SELECT_UNARY_OP, WHITESPACE;\n\n    function Lexer(sql, opts) {\n      var bytesConsumed, i;\n      if (opts == null) {\n        opts = {};\n      }\n      this.sql = sql;\n      this.preserveWhitespace = opts.preserveWhitespace || false;\n      this.tokens = [];\n      this.currentLine = 1;\n      i = 0;\n      while (this.chunk = sql.slice(i)) {\n        bytesConsumed = this.keywordToken() || this.starToken() || this.booleanToken() || this.functionToken() || this.windowExtension() || this.sortOrderToken() || this.seperatorToken() || this.operatorToken() || this.mathToken() || this.dotToken() || this.conditionalToken() || this.subSelectOpToken() || this.subSelectUnaryOpToken() || this.numberToken() || this.stringToken() || this.parameterToken() || this.parensToken() || this.whitespaceToken() || this.literalToken();\n        if (bytesConsumed < 1) {\n          throw new Error(\"NOTHING CONSUMED: Stopped at - '\" + (this.chunk.slice(0, 30)) + \"'\");\n        }\n        i += bytesConsumed;\n      }\n      this.token('EOF', '');\n      this.postProcess();\n    }\n\n    Lexer.prototype.postProcess = function() {\n      var i, next_token, token, _i, _len, _ref, _results;\n      _ref = this.tokens;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        token = _ref[i];\n        if (token[0] === 'STAR') {\n          next_token = this.tokens[i + 1];\n          if (!(next_token[0] === 'SEPARATOR' || next_token[0] === 'FROM')) {\n            _results.push(token[0] = 'MATH_MULTI');\n          } else {\n            _results.push(void 0);\n          }\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Lexer.prototype.token = function(name, value) {\n      return this.tokens.push([name, value, this.currentLine]);\n    };\n\n    Lexer.prototype.tokenizeFromRegex = function(name, regex, part, lengthPart, output) {\n      var match, partMatch;\n      if (part == null) {\n        part = 0;\n      }\n      if (lengthPart == null) {\n        lengthPart = part;\n      }\n      if (output == null) {\n        output = true;\n      }\n      if (!(match = regex.exec(this.chunk))) {\n        return 0;\n      }\n      partMatch = match[part];\n      if (output) {\n        this.token(name, partMatch);\n      }\n      return match[lengthPart].length;\n    };\n\n    Lexer.prototype.tokenizeFromWord = function(name, word) {\n      var match, matcher;\n      if (word == null) {\n        word = name;\n      }\n      word = this.regexEscape(word);\n      matcher = /^\\w+$/.test(word) ? new RegExp(\"^(\" + word + \")\\\\b\", 'ig') : new RegExp(\"^(\" + word + \")\", 'ig');\n      match = matcher.exec(this.chunk);\n      if (!match) {\n        return 0;\n      }\n      this.token(name, match[1]);\n      return match[1].length;\n    };\n\n    Lexer.prototype.tokenizeFromList = function(name, list) {\n      var entry, ret, _i, _len;\n      ret = 0;\n      for (_i = 0, _len = list.length; _i < _len; _i++) {\n        entry = list[_i];\n        ret = this.tokenizeFromWord(name, entry);\n        if (ret > 0) {\n          break;\n        }\n      }\n      return ret;\n    };\n\n    Lexer.prototype.keywordToken = function() {\n      return this.tokenizeFromWord('SELECT') || this.tokenizeFromWord('DISTINCT') || this.tokenizeFromWord('FROM') || this.tokenizeFromWord('WHERE') || this.tokenizeFromWord('GROUP') || this.tokenizeFromWord('ORDER') || this.tokenizeFromWord('BY') || this.tokenizeFromWord('HAVING') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('JOIN') || this.tokenizeFromWord('LEFT') || this.tokenizeFromWord('RIGHT') || this.tokenizeFromWord('INNER') || this.tokenizeFromWord('OUTER') || this.tokenizeFromWord('ON') || this.tokenizeFromWord('AS') || this.tokenizeFromWord('UNION') || this.tokenizeFromWord('ALL') || this.tokenizeFromWord('LIMIT') || this.tokenizeFromWord('OFFSET') || this.tokenizeFromWord('FETCH') || this.tokenizeFromWord('ROW') || this.tokenizeFromWord('ROWS') || this.tokenizeFromWord('ONLY') || this.tokenizeFromWord('NEXT') || this.tokenizeFromWord('FIRST');\n    };\n\n    Lexer.prototype.dotToken = function() {\n      return this.tokenizeFromWord('DOT', '.');\n    };\n\n    Lexer.prototype.operatorToken = function() {\n      return this.tokenizeFromList('OPERATOR', SQL_OPERATORS);\n    };\n\n    Lexer.prototype.mathToken = function() {\n      return this.tokenizeFromList('MATH', MATH) || this.tokenizeFromList('MATH_MULTI', MATH_MULTI);\n    };\n\n    Lexer.prototype.conditionalToken = function() {\n      return this.tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);\n    };\n\n    Lexer.prototype.subSelectOpToken = function() {\n      return this.tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP);\n    };\n\n    Lexer.prototype.subSelectUnaryOpToken = function() {\n      return this.tokenizeFromList('SUB_SELECT_UNARY_OP', SUB_SELECT_UNARY_OP);\n    };\n\n    Lexer.prototype.functionToken = function() {\n      return this.tokenizeFromList('FUNCTION', SQL_FUNCTIONS);\n    };\n\n    Lexer.prototype.sortOrderToken = function() {\n      return this.tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);\n    };\n\n    Lexer.prototype.booleanToken = function() {\n      return this.tokenizeFromList('BOOLEAN', BOOLEAN);\n    };\n\n    Lexer.prototype.starToken = function() {\n      return this.tokenizeFromRegex('STAR', STAR);\n    };\n\n    Lexer.prototype.seperatorToken = function() {\n      return this.tokenizeFromRegex('SEPARATOR', SEPARATOR);\n    };\n\n    Lexer.prototype.literalToken = function() {\n      return this.tokenizeFromRegex('LITERAL', LITERAL, 1, 0);\n    };\n\n    Lexer.prototype.numberToken = function() {\n      return this.tokenizeFromRegex('NUMBER', NUMBER);\n    };\n\n    Lexer.prototype.parameterToken = function() {\n      return this.tokenizeFromRegex('PARAMETER', PARAMETER);\n    };\n\n    Lexer.prototype.stringToken = function() {\n      return this.tokenizeFromRegex('STRING', STRING, 1, 0) || this.tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);\n    };\n\n    Lexer.prototype.parensToken = function() {\n      return this.tokenizeFromRegex('LEFT_PAREN', /^\\(/) || this.tokenizeFromRegex('RIGHT_PAREN', /^\\)/);\n    };\n\n    Lexer.prototype.windowExtension = function() {\n      var match;\n      match = /^\\.(win):(length|time)/i.exec(this.chunk);\n      if (!match) {\n        return 0;\n      }\n      this.token('WINDOW', match[1]);\n      this.token('WINDOW_FUNCTION', match[2]);\n      return match[0].length;\n    };\n\n    Lexer.prototype.whitespaceToken = function() {\n      var match, newlines, partMatch;\n      if (!(match = WHITESPACE.exec(this.chunk))) {\n        return 0;\n      }\n      partMatch = match[0];\n      newlines = partMatch.replace(/[^\\n]/, '').length;\n      this.currentLine += newlines;\n      if (this.preserveWhitespace) {\n        this.token(name, partMatch);\n      }\n      return partMatch.length;\n    };\n\n    Lexer.prototype.regexEscape = function(str) {\n      return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    };\n\n    SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];\n\n    SQL_SORT_ORDERS = ['ASC', 'DESC'];\n\n    SQL_OPERATORS = ['=', '!=', '>=', '>', '<=', '<>', '<', 'LIKE', 'IS NOT', 'IS'];\n\n    SUB_SELECT_OP = ['IN', 'NOT IN', 'ANY', 'ALL', 'SOME'];\n\n    SUB_SELECT_UNARY_OP = ['EXISTS'];\n\n    SQL_CONDITIONALS = ['AND', 'OR'];\n\n    BOOLEAN = ['TRUE', 'FALSE', 'NULL'];\n\n    MATH = ['+', '-'];\n\n    MATH_MULTI = ['/', '*'];\n\n    STAR = /^\\*/;\n\n    SEPARATOR = /^,/;\n\n    WHITESPACE = /^[ \\n\\r]+/;\n\n    LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;\n\n    PARAMETER = /^\\$[0-9]+/;\n\n    NUMBER = /^[0-9]+(\\.[0-9]+)?/;\n\n    STRING = /^'([^\\\\']*(?:\\\\.[^\\\\']*)*)'/;\n\n    DBLSTRING = /^\"([^\\\\\"]*(?:\\\\.[^\\\\\"]*)*)\"/;\n\n    return Lexer;\n\n  })();\n\n  exports.tokenize = function(sql, opts) {\n    return (new Lexer(sql, opts)).tokens;\n  };\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}