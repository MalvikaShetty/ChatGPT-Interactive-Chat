{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ChatDB } from '../../shared/data/chat/chat';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar today = new Date().toLocaleString('en-US', {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: true\n});\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.chat = [];\n    this.users = [];\n    this.chatHistory = [];\n    this.base = \"https://localhost:44372/api/GPTStock\";\n    this._returnedChatGPTResponse = \"\";\n    //formChat:ChatMessages = new ChatMessages();\n    this.listChats = [];\n    this.chat = ChatDB.chat;\n    this.users = ChatDB.chatUser;\n  }\n  // Get User Data\n  getUsers() {\n    const users = new Observable(observer => {\n      observer.next(this.users);\n      observer.complete();\n    });\n    return users;\n  }\n  // Get cuurent user\n  getCurrentUser() {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.authenticate === 0;\n      });\n    }));\n  }\n  // chat to user\n  chatToUser(id) {\n    return this.getUsers().pipe(map(users => {\n      return users.find(item => {\n        return item.id === id;\n      });\n    }));\n  }\n  // Get users chat\n  getChats(id) {\n    this.http.get(this.base + \"/getmessages/\" + id).toPromise().then(res => this.chatHistory = res);\n  }\n  // public getUserChat(): Observable<ChatMessages[]> {\n  //   const chat = new Observable(observer => {\n  //     observer.next(this.chat);\n  //     observer.complete();\n  //   });\n  //   return <Observable<ChatMessages[]>>chat;\n  // }\n  // // Get chat History\n  // public getChatHistory(id: number) {\n  //   return this.getUserChat().pipe(map(users => {\n  //     return users.find((item) => {\n  //       return item.userId === id;\n  //     });\n  //   }));\n  // }\n  // Send Message to user\n  sendMessage(chat, jsonData) {\n    this.chat.filter(chats => {\n      setTimeout(function () {\n        document.querySelector(\".chat-history\").scrollBy({\n          top: 200,\n          behavior: 'smooth'\n        });\n      }, 310);\n      this.responseMessage(chat, jsonData);\n    });\n  }\n  wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  responseMessage(chat, jsonData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.http.post(this.base + \"/stocktable/\" + chat.messages[0].question, jsonData, {\n        headers: headers\n      }).subscribe(result => {\n        this._returnedChatGPTResponse = result;\n      }, error => console.error(error));\n      setTimeout(() => {\n        chat.messages[0].answer = this._returnedChatGPTResponse;\n        console.log(this._returnedChatGPTResponse + \" edennmom \");\n        this.http.post(this.base + \"/postmessage\", chat).subscribe(error => console.error(error));\n        document.querySelector(\".chat-history\").scrollBy({\n          top: 200,\n          behavior: 'smooth'\n        });\n      }, 3000);\n    });\n  }\n  getMessage() {\n    return this.http.get(this.base + \"/getmessage\");\n  }\n}\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","map","ChatDB","HttpClient","HttpHeaders","today","Date","toLocaleString","hour","minute","hour12","ChatService","constructor","http","chat","users","chatUser","getUsers","observer","next","complete","getCurrentUser","pipe","find","item","authenticate","chatToUser","id","getChats","get","base","toPromise","then","res","chatHistory","sendMessage","jsonData","filter","chats","setTimeout","document","querySelector","scrollBy","top","behavior","responseMessage","wait","ms","Promise","resolve","headers","post","messages","question","subscribe","result","_returnedChatGPTResponse","error","console","answer","log","getMessage","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malvi\\Angular\\template\\src\\app\\shared\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subscriber } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ChatDB } from '../../shared/data/chat/chat';\nimport { ChatMessages, ChatUsers } from '../model/chat.models';\nimport { HttpClient,HttpHeaders  } from '@angular/common/http';\n\nvar today = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  public observer: Subscriber<{}>;\n  public chat: any[] = []\n  public users: any[] = []\n  public chatHistory : ChatMessages[] = []\n  readonly base=\"https://localhost:44372/api/GPTStock\"\n  _returnedChatGPTResponse: string=\"\";\n\n  constructor(private http:HttpClient) {\n    this.chat = ChatDB.chat\n    this.users = ChatDB.chatUser\n  }\n\n  //formChat:ChatMessages = new ChatMessages();\n  listChats: ChatMessages[]=[];\n\n  // Get User Data\n  public getUsers(): Observable<ChatUsers[]> {\n    const users = new Observable(observer => {\n      observer.next(this.users);\n      observer.complete();\n    });\n    return <Observable<ChatUsers[]>>users;\n  }\n\n  // Get cuurent user\n  public getCurrentUser() {\n    return this.getUsers().pipe(map(users => {\n      return users.find((item) => {\n        return item.authenticate === 0;\n      });\n    }));\n  }\n\n  // chat to user\n  public chatToUser(id: number) {\n    return this.getUsers().pipe(map(users => {\n      return users.find((item) => {\n        return item.id === id;\n      });\n    }));\n  }\n\n  // Get users chat\n\n  public getChats(id:any){\n    this.http.get(this.base + \"/getmessages/\" + id).toPromise().then(res=> this.chatHistory = res as ChatMessages[]);\n  }\n\n\n  // public getUserChat(): Observable<ChatMessages[]> {\n  //   const chat = new Observable(observer => {\n  //     observer.next(this.chat);\n  //     observer.complete();\n  //   });\n  //   return <Observable<ChatMessages[]>>chat;\n  // }\n\n  // // Get chat History\n  // public getChatHistory(id: number) {\n  //   return this.getUserChat().pipe(map(users => {\n  //     return users.find((item) => {\n  //       return item.userId === id;\n  //     });\n  //   }));\n  // }\n\n  // Send Message to user\n  public sendMessage(chat:ChatMessages, jsonData){\n    this.chat.filter(chats => {\n        setTimeout(function () {\n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\n        }, 310)\n       this.responseMessage(chat,jsonData);\n    })\n  }\n\n  wait(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n \n  public async responseMessage(chat:ChatMessages,jsonData) {\n    const headers = new HttpHeaders({'Content-Type': 'application/json'});\n    this.http.post<any>(this.base+\"/stocktable/\" + chat.messages[0].question , jsonData , { headers: headers})\n    .subscribe(result => \n      { this._returnedChatGPTResponse = result;}, \n      error => console.error(error)); \n\n      setTimeout(()=> {\n          chat.messages[0].answer = this._returnedChatGPTResponse;\n          console.log(this._returnedChatGPTResponse + \" edennmom \");\n          this.http.post(this.base + \"/postmessage\" , chat).subscribe( error => console.error(error));\n          document.querySelector(\".chat-history\").scrollBy({ top: 200, behavior: 'smooth' });\n      }, 3000)\n       \n  }\n\n  public getMessage():Observable<ChatMessages[]>{\n    return this.http.get<ChatMessages[]>(this.base + \"/getmessage\");\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}